{
    "docs": [
        {
            "location": "/flexbox/", 
            "text": "The CSS Flexbox Layout\n\n\nBackground\n\n\nThe \nFlexible Box Layout Module\n (short \nflexbox\n) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word 'flex').\n\n\nBefore the Flexbox Layout module, there were four layout modes:\n\n\n\n\nBlock, for sections in a webpage\n\n\nInline, for text\n\n\nTable, for two-dimensional table data\n\n\nPositioned, for explicit position of an element\n\n\n\n\nThe Flexible Box Layout Module makes it easier to design flexible responsive layout structure without using float or positioning.\n\n\nThe main idea behind the flex layout is to give the container the ability to alter its items' \nwidth\n, \nheight\n, and \norder\n to \nbest fill the available space\n in particular to \naccommodate to all kind of display devices and screen sizes\n. A flex container expands items to fill available free space, or shrinks them to prevent overflow.\n\n\nMost importantly, the flexbox layout is \ndirection-agnostic\n as opposed to the regular layouts such as \nblock\n, which is vertically-based and \ninline\n, which is horizontally-based. While those work well for pages, they \nlack flexibility to support large or complex applications\n, especially when it comes to orientation changing, resizing, stretching, shrinking, etc.\n\n\n\n\nWhen to use Flexbox vs. Grid layout\n\n\nFlexbox layout is most appropriate to the components of an application, and small-scale layouts, while the Grid layout is intended for larger scale layouts.\n\n\n\n\nBasic Concepts and Terminology\n\n\nFlexbox is a whole module and not a single property. It hence involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as \"\nflex container\n\") whereas the others are meant to be set on the children (said \"\nflex items\n\").\n\n\nThe flex layout is based on \nflex-flow directions\n. The following figure from the specification explains the main idea behind the flex layout.\n\n\nMain elements of the flexbox layout\n\n\nBasically, items will be laid out following \neither\n the \nmain axis\n (from \nmain-start\n to \nmain-end\n) or the \ncross axis\n (from \ncross-start\n to \ncross-end\n).\n\n\n\n\nmain axis\n \u2013 The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the \nflex-direction\n property (see below).\n\n\nmain-start | main-end\n - The flex items are placed within the container starting from \nmain-start\n and going to \nmain-end\n.\n\n\nmain size\n \u2013 A flex item's width or height, whichever is in the main dimension, is the item's main size. The flex item's main size property is either the \u2018width\u2019 or \u2018height\u2019 property, whichever is in the main dimension.\n\n\ncross axis\n \u2013 The axis perpendicular to the main axis is called the \ncross axis\n. Its direction depends on the main axis direction.\n\n\ncross-start | cross-end\n - Flex lines are filled with items and placed into the container starting on the \ncross-start\n side of the flex container and going toward the \ncross-end\n side.\n\n\ncross size\n - The width or height of a flex item, whichever is in the cross dimension, is the item's cross size. The cross size property is whichever of \u2018width\u2019 or \u2018height\u2019 that is in the cross dimension.\n\n\n\n\nThe flex container (=parent)\n\n\nThe items laid out in the flex container (=children)\n\n\nProperties of the Flex Container\n\n\nTo start using the Flexbox model, you need to first define a flex container.\n\n\n1\n2\n3\n4\n5\ndiv\n \nclass\n=\nflex-container\n\n  \ndiv\n \nclass\n=\nitem\n1\n/\ndiv\n\n  \ndiv\n \nclass\n=\nitem\n2\n/\ndiv\n\n  \ndiv\n \nclass\n=\nitem\n3\n/\ndiv\n\n\n/\ndiv\n\n\n\n\n\n\n\nThe flex container properties are:\n\n\n\n\nflex-direction\n\n\nflex-wrap\n\n\nflex-flow\n\n\njustify-content\n\n\nalign-items\n\n\nalign-content\n\n\n\n\ndisplay\n\n\nThis defines a flex container; the flex container becomes flexible by setting the \ndisplay\n property to \nflex\n (=\nblock\n) or \ninline-flex\n (=\ninline\n) depending on the given value. It enables a flex context for all its direct children.\n\n\n1\n2\n3\n.\ncontainer\n \n{\n\n  \ndisplay\n:\n \nflex\n;\n \n/* or inline-flex */\n\n\n}\n\n\n\n\n\n\n\n\n\nflex-direction\n\n\n\n\nThis establishes the \nmain axis\n, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a \nsingle-direction layout concept\n. Think of flex items as primarily laying out either in horizontal rows or vertical columns.\n\n\n1\n2\n3\n.\ncontainer\n \n{\n\n  \nflex-direction\n:\n \nrow\n \n|\n \nrow-reverse\n \n|\n \ncolumn\n \n|\n \ncolumn-reverse\n;\n\n\n}\n\n\n\n\n\n\n\n\n\nrow\n (default): left to right in ltr; right to left in rtl\n\n\nrow-reverse\n: right to left in ltr; left to right in rtl\n\n\ncolumn\n: same as row but top to bottom\n\n\ncolumn-reverse\n: same as row-reverse but bottom to top\n\n\n\n\n\n\nflex-wrap\n\n\nThe \nflex-wrap\n property specifies whether the flex items should wrap or not.\n\n\n\n\nBy default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.\n\n\n1\n2\n3\n.\ncontainer\n{\n\n  \nflex-wrap\n:\n \nnowrap\n \n|\n \nwrap\n \n|\n \nwrap-reverse\n;\n\n\n}\n\n\n\n\n\n\n\n\n\nnowrap\n (default): all flex items will be on one line\n\n\nwrap\n: flex items will wrap onto multiple lines, from top to bottom.\n\n\nwrap-reverse\n: flex items will wrap onto multiple lines from bottom to top.\n\n\n\n\n\n\njustify-content\n\n\nThe \njustify-content\n property is used to align the flex items along the \nmain axis\n, i.e., to fill the mai axis' horizontal space.\n\n\n\n\nIt helps distribute extra free space left over when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.\n\n\n1\n2\n3\n.\ncontainer\n \n{\n\n  \njustify-content\n:\n \nflex-start\n \n|\n \nflex-end\n \n|\n \ncenter\n \n|\n \nspace-between\n \n|\n \nspace-around\n \n|\n \nspace\n-\nevenly\n;\n\n\n}\n\n\n\n\n\n\n\n\n\nflex-start\n (default): items are packed toward the start line\n\n\nflex-end\n: items are packed toward to end line\n\n\ncenter\n: items are centered along the line\n\n\nspace-between\n: items are evenly distributed in the line; first item is on the start line, last item on the end line\n\n\nspace-around\n: items are evenly distributed in the line with equal space around them. Note that visually the spaces aren't equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.\n\n\nspace-evenly\n: items are distributed so that the spacing between any two items (and the space to the edges) is equal.\n\n\n\n\n\n\nalign-items\n\n\nThe \nalign-items\n property is used to align the flex items vertically.\n\n\n\n\nThis defines the default behaviour for how flex items are laid out along the cross axis on the current line. Think of it as the \njustify-content\n version for the cross-axis (perpendicular to the main-axis).\n\n\n1\n2\n3\n.\ncontainer\n \n{\n\n  \nalign-items\n:\n \nflex-start\n \n|\n \nflex-end\n \n|\n \ncenter\n \n|\n \nbaseline\n \n|\n \nstretch\n;\n\n\n}\n\n\n\n\n\n\n\n\n\nflex-start\n: cross-start margin edge of the items is placed on the cross-start line\n\n\nflex-end\n: cross-end margin edge of the items is placed on the cross-end line\n\n\ncenter\n: items are centered in the cross-axis\n\n\nbaseline\n: items are aligned such as their baselines align\n\n\nstretch\n (default): stretch to fill the container (still respect min-width/max-width)\n\n\n\n\n\n\nalign-content\n\n\nThe \nalign-content\n property is used to align the flex lines within the flex container if there is extra space available.\n\n\n\n\nThis aligns a flex container's lines within when there is extra space in the \ncross-axis\n, similar to how \njustify-content\n aligns individual items within the \nmain-axis\n.\n\n\n\n\nNote\n\n\nThis property has no effect when there is only one line of flex items.\n\n\n\n\n1\n2\n3\n.\ncontainer\n \n{\n\n  \nalign-content\n:\n \nflex-start\n \n|\n \nflex-end\n \n|\n \ncenter\n \n|\n \nspace-between\n \n|\n \nspace-around\n \n|\n \nstretch\n;\n\n\n}\n\n\n\n\n\n\n\n\n\nflex-start\n: lines packed to the start of the container\n\n\nflex-end\n: lines packed to the end of the container\n\n\ncenter\n: lines packed to the center of the container\n\n\nspace-between\n: lines evenly distributed; the first line is at the start of the container while the last one is at the end\n\n\nspace-around\n: lines evenly distributed with equal space around each line\n\n\nstretch\n (default): lines stretch to take up the remaining space\n\n\n\n\nProperties for the Flex Items\n\n\nThe direct child elements of a flex container automatically becomes flexible (flex) items.\n\n\nThe flex item properties are:\n\n\n\n\norder\n\n\nflex-grow\n\n\nflex-shrink\n\n\nflex-basis\n\n\nflex\n\n\nalign-self\n\n\n\n\norder\n\n\nThe \norder\n property specifies the order of the flex items.\n\n\n\n\nBy default, flex items are laid out in the source order. However, the order property controls the order in which they appear in the flex container.\nThe first flex item in the code does not have to appear as the first item in the layout.\n\n\n1\n2\n3\n#\nitem\n \n{\n\n  \norder\n:\n \ninteger\n;\n \n/* default is 0 */\n\n\n}\n\n\n\n\n\n\n\n\n\nflex-grow\n\n\nThe \nflex-grow\n property specifies how much a flex item will grow relative to the rest of the flex items.\n\n\n\n\nIt accepts a \nunitless value\n that serves as a \nproportion\n. It dictates the \nrelative amount\n of the available space inside the flex container the item should take up.\n\n\nIf all items have \nflex-grow\n set to 1, the remaining space in the container will be distributed equally to all children. If one of the children has a value of 2, the remaining space would take up twice as much space as the others (or it will try to, at least).\n\n\n1\n2\n3\n#\nitem\n \n{\n\n  \nflex-grow\n:\n \nnumber\n;\n \n/* default 0 */\n\n\n}\n\n\n\n\n\n\n\nNegative numbers are invalid.\n\n\n\n\nflex-shrink\n\n\nThe \nflex-shrink\n property specifies how much a flex item will shrink relative to the rest of the flex items.\n\n\n1\n2\n3\n.\nitem\n \n{\n\n  \nflex-shrink\n:\n \nnumber\n;\n \n/* default 1 */\n\n\n}\n\n\n\n\n\n\n\nNegative numbers are invalid.\n\n\n\n\nflex-basis\n\n\nThe \nflex-basis\n property specifies the initial length of a flex item.\n\n\nIt defines the \ndefault size\n of an element before the remaining space is distributed. It can be a length (e.g. \n20%\n, \n5rem\n, etc.) or a keyword. The auto keyword means \"look at my width or height property\". The \ncontent\n keyword means \"size it based on the item's content\" - this keyword isn't well supported yet, so it's hard to test and harder to know what its brethren \nmax-content\n, \nmin-content\n, and \nfit-content\n do.\n\n\n1\n2\n3\n.\nitem\n \n{\n\n  \nflex-basis\n:\n \nlength\n \n|\n \nauto\n;\n \n/* default auto */\n\n\n}\n\n\n\n\n\n\n\nIf set to \n0\n, the extra space around content isn't factored in. If set to \nauto\n, the extra space is distributed based on its \nflex-grow\n value.\n\n\n\n\n\n\nalign-self\n\n\nThe \nalign-self\n property specifies the alignment for the selected item inside the flexible container.\n\n\nThe \nalign-self\n property overrides the default alignment set by the container's \nalign-items\n property.\n\n\nPlease see the \nalign-items\n explanation to understand the available values.\n\n\n1\n2\n3\n.\nitem\n \n{\n\n  \nalign-self\n:\n \nauto\n \n|\n \nflex-start\n \n|\n \nflex-end\n \n|\n \ncenter\n \n|\n \nbaseline\n \n|\n \nstretch\n;\n\n\n}", 
            "title": "CSS Flexbox"
        }, 
        {
            "location": "/flexbox/#the-css-flexbox-layout", 
            "text": "", 
            "title": "The CSS Flexbox Layout"
        }, 
        {
            "location": "/flexbox/#background", 
            "text": "The  Flexible Box Layout Module  (short  flexbox ) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word 'flex').  Before the Flexbox Layout module, there were four layout modes:   Block, for sections in a webpage  Inline, for text  Table, for two-dimensional table data  Positioned, for explicit position of an element   The Flexible Box Layout Module makes it easier to design flexible responsive layout structure without using float or positioning.  The main idea behind the flex layout is to give the container the ability to alter its items'  width ,  height , and  order  to  best fill the available space  in particular to  accommodate to all kind of display devices and screen sizes . A flex container expands items to fill available free space, or shrinks them to prevent overflow.  Most importantly, the flexbox layout is  direction-agnostic  as opposed to the regular layouts such as  block , which is vertically-based and  inline , which is horizontally-based. While those work well for pages, they  lack flexibility to support large or complex applications , especially when it comes to orientation changing, resizing, stretching, shrinking, etc.   When to use Flexbox vs. Grid layout  Flexbox layout is most appropriate to the components of an application, and small-scale layouts, while the Grid layout is intended for larger scale layouts.", 
            "title": "Background"
        }, 
        {
            "location": "/flexbox/#basic-concepts-and-terminology", 
            "text": "Flexbox is a whole module and not a single property. It hence involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as \" flex container \") whereas the others are meant to be set on the children (said \" flex items \").  The flex layout is based on  flex-flow directions . The following figure from the specification explains the main idea behind the flex layout.  Main elements of the flexbox layout  Basically, items will be laid out following  either  the  main axis  (from  main-start  to  main-end ) or the  cross axis  (from  cross-start  to  cross-end ).   main axis  \u2013 The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the  flex-direction  property (see below).  main-start | main-end  - The flex items are placed within the container starting from  main-start  and going to  main-end .  main size  \u2013 A flex item's width or height, whichever is in the main dimension, is the item's main size. The flex item's main size property is either the \u2018width\u2019 or \u2018height\u2019 property, whichever is in the main dimension.  cross axis  \u2013 The axis perpendicular to the main axis is called the  cross axis . Its direction depends on the main axis direction.  cross-start | cross-end  - Flex lines are filled with items and placed into the container starting on the  cross-start  side of the flex container and going toward the  cross-end  side.  cross size  - The width or height of a flex item, whichever is in the cross dimension, is the item's cross size. The cross size property is whichever of \u2018width\u2019 or \u2018height\u2019 that is in the cross dimension.   The flex container (=parent)  The items laid out in the flex container (=children)", 
            "title": "Basic Concepts and Terminology"
        }, 
        {
            "location": "/flexbox/#properties-of-the-flex-container", 
            "text": "To start using the Flexbox model, you need to first define a flex container.  1\n2\n3\n4\n5 div   class = flex-container \n   div   class = item 1 / div \n   div   class = item 2 / div \n   div   class = item 3 / div  / div    The flex container properties are:   flex-direction  flex-wrap  flex-flow  justify-content  align-items  align-content", 
            "title": "Properties of the Flex Container"
        }, 
        {
            "location": "/flexbox/#display", 
            "text": "This defines a flex container; the flex container becomes flexible by setting the  display  property to  flex  (= block ) or  inline-flex  (= inline ) depending on the given value. It enables a flex context for all its direct children.  1\n2\n3 . container   { \n   display :   flex ;   /* or inline-flex */  }", 
            "title": "display"
        }, 
        {
            "location": "/flexbox/#flex-direction", 
            "text": "This establishes the  main axis , thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a  single-direction layout concept . Think of flex items as primarily laying out either in horizontal rows or vertical columns.  1\n2\n3 . container   { \n   flex-direction :   row   |   row-reverse   |   column   |   column-reverse ;  }     row  (default): left to right in ltr; right to left in rtl  row-reverse : right to left in ltr; left to right in rtl  column : same as row but top to bottom  column-reverse : same as row-reverse but bottom to top", 
            "title": "flex-direction"
        }, 
        {
            "location": "/flexbox/#flex-wrap", 
            "text": "The  flex-wrap  property specifies whether the flex items should wrap or not.   By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.  1\n2\n3 . container { \n   flex-wrap :   nowrap   |   wrap   |   wrap-reverse ;  }     nowrap  (default): all flex items will be on one line  wrap : flex items will wrap onto multiple lines, from top to bottom.  wrap-reverse : flex items will wrap onto multiple lines from bottom to top.", 
            "title": "flex-wrap"
        }, 
        {
            "location": "/flexbox/#justify-content", 
            "text": "The  justify-content  property is used to align the flex items along the  main axis , i.e., to fill the mai axis' horizontal space.   It helps distribute extra free space left over when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.  1\n2\n3 . container   { \n   justify-content :   flex-start   |   flex-end   |   center   |   space-between   |   space-around   |   space - evenly ;  }     flex-start  (default): items are packed toward the start line  flex-end : items are packed toward to end line  center : items are centered along the line  space-between : items are evenly distributed in the line; first item is on the start line, last item on the end line  space-around : items are evenly distributed in the line with equal space around them. Note that visually the spaces aren't equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.  space-evenly : items are distributed so that the spacing between any two items (and the space to the edges) is equal.", 
            "title": "justify-content"
        }, 
        {
            "location": "/flexbox/#align-items", 
            "text": "The  align-items  property is used to align the flex items vertically.   This defines the default behaviour for how flex items are laid out along the cross axis on the current line. Think of it as the  justify-content  version for the cross-axis (perpendicular to the main-axis).  1\n2\n3 . container   { \n   align-items :   flex-start   |   flex-end   |   center   |   baseline   |   stretch ;  }     flex-start : cross-start margin edge of the items is placed on the cross-start line  flex-end : cross-end margin edge of the items is placed on the cross-end line  center : items are centered in the cross-axis  baseline : items are aligned such as their baselines align  stretch  (default): stretch to fill the container (still respect min-width/max-width)", 
            "title": "align-items"
        }, 
        {
            "location": "/flexbox/#align-content", 
            "text": "The  align-content  property is used to align the flex lines within the flex container if there is extra space available.   This aligns a flex container's lines within when there is extra space in the  cross-axis , similar to how  justify-content  aligns individual items within the  main-axis .   Note  This property has no effect when there is only one line of flex items.   1\n2\n3 . container   { \n   align-content :   flex-start   |   flex-end   |   center   |   space-between   |   space-around   |   stretch ;  }     flex-start : lines packed to the start of the container  flex-end : lines packed to the end of the container  center : lines packed to the center of the container  space-between : lines evenly distributed; the first line is at the start of the container while the last one is at the end  space-around : lines evenly distributed with equal space around each line  stretch  (default): lines stretch to take up the remaining space", 
            "title": "align-content"
        }, 
        {
            "location": "/flexbox/#properties-for-the-flex-items", 
            "text": "The direct child elements of a flex container automatically becomes flexible (flex) items.  The flex item properties are:   order  flex-grow  flex-shrink  flex-basis  flex  align-self", 
            "title": "Properties for the Flex Items"
        }, 
        {
            "location": "/flexbox/#order", 
            "text": "The  order  property specifies the order of the flex items.   By default, flex items are laid out in the source order. However, the order property controls the order in which they appear in the flex container.\nThe first flex item in the code does not have to appear as the first item in the layout.  1\n2\n3 # item   { \n   order :   integer ;   /* default is 0 */  }", 
            "title": "order"
        }, 
        {
            "location": "/flexbox/#flex-grow", 
            "text": "The  flex-grow  property specifies how much a flex item will grow relative to the rest of the flex items.   It accepts a  unitless value  that serves as a  proportion . It dictates the  relative amount  of the available space inside the flex container the item should take up.  If all items have  flex-grow  set to 1, the remaining space in the container will be distributed equally to all children. If one of the children has a value of 2, the remaining space would take up twice as much space as the others (or it will try to, at least).  1\n2\n3 # item   { \n   flex-grow :   number ;   /* default 0 */  }    Negative numbers are invalid.", 
            "title": "flex-grow"
        }, 
        {
            "location": "/flexbox/#flex-shrink", 
            "text": "The  flex-shrink  property specifies how much a flex item will shrink relative to the rest of the flex items.  1\n2\n3 . item   { \n   flex-shrink :   number ;   /* default 1 */  }    Negative numbers are invalid.", 
            "title": "flex-shrink"
        }, 
        {
            "location": "/flexbox/#flex-basis", 
            "text": "The  flex-basis  property specifies the initial length of a flex item.  It defines the  default size  of an element before the remaining space is distributed. It can be a length (e.g.  20% ,  5rem , etc.) or a keyword. The auto keyword means \"look at my width or height property\". The  content  keyword means \"size it based on the item's content\" - this keyword isn't well supported yet, so it's hard to test and harder to know what its brethren  max-content ,  min-content , and  fit-content  do.  1\n2\n3 . item   { \n   flex-basis :   length   |   auto ;   /* default auto */  }    If set to  0 , the extra space around content isn't factored in. If set to  auto , the extra space is distributed based on its  flex-grow  value.", 
            "title": "flex-basis"
        }, 
        {
            "location": "/flexbox/#align-self", 
            "text": "The  align-self  property specifies the alignment for the selected item inside the flexible container.  The  align-self  property overrides the default alignment set by the container's  align-items  property.  Please see the  align-items  explanation to understand the available values.  1\n2\n3 . item   { \n   align-self :   auto   |   flex-start   |   flex-end   |   center   |   baseline   |   stretch ;  }", 
            "title": "align-self"
        }
    ]
}