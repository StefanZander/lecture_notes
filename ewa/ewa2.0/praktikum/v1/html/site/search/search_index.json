{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Willkommen auf den EWA2.0-Praktikumsseiten Auf den folgenden Seiten finden Sie die Aufgaben der jeweiligen Praktikumseinheiten sowie allgemeine Informationen zu Inhalt und Ablauf des Praktikums. Allgemeine Informationen Vorbemerkung zum Praktikum Anforderungen an die zu entwickelnde Web-Applikation Einheiten Termin 0: Statisches HTML und Anforderungsanalyse ( zu Hause) Termin 1: PHP \u2013 Web-Server Setup und dynamische Seitengenerierung Termin 2: PHP \u2013 Seitenklassen, Datenbankzugriff, Sessionmanagement und Sicherheit Termin 3: Client-seitige Interaktion mit JavaScript, AJAX und JSON Termin 4: Responsives Webdesign mit CSS3 und Media Queries Termin 5: Abnahme Diese Unterlagen wurden mit MkDocs , Markdown und Visual Studio Code erstellt und mit dem individuell angepassten Material Theme for MkDocs gerendert.","title":"Startseite"},{"location":"#willkommen-auf-den-ewa20-praktikumsseiten","text":"Auf den folgenden Seiten finden Sie die Aufgaben der jeweiligen Praktikumseinheiten sowie allgemeine Informationen zu Inhalt und Ablauf des Praktikums.","title":"Willkommen auf den EWA2.0-Praktikumsseiten"},{"location":"#allgemeine-informationen","text":"Vorbemerkung zum Praktikum Anforderungen an die zu entwickelnde Web-Applikation","title":"Allgemeine Informationen"},{"location":"#einheiten","text":"Termin 0: Statisches HTML und Anforderungsanalyse ( zu Hause) Termin 1: PHP \u2013 Web-Server Setup und dynamische Seitengenerierung Termin 2: PHP \u2013 Seitenklassen, Datenbankzugriff, Sessionmanagement und Sicherheit Termin 3: Client-seitige Interaktion mit JavaScript, AJAX und JSON Termin 4: Responsives Webdesign mit CSS3 und Media Queries Termin 5: Abnahme Diese Unterlagen wurden mit MkDocs , Markdown und Visual Studio Code erstellt und mit dem individuell angepassten Material Theme for MkDocs gerendert.","title":"Einheiten"},{"location":"anforderungen/","text":"Anforderungen an die Web-Applikation Note Hinweis : Die Anforderungen sind aus Sicht des Pizzaservice beschrieben. Wenn Sie einen eigenen Webshop entwickeln, dann m\u00fcssen Sie die Anforderungen entsprechend \u00fcbertragen (bspw. kann anstelle der B\u00e4ckerseite eine Versandabteilungs- oder Kommissionierungsseite etc. erstellt werden). Die Anforderungen hinsichtlich Aufbau und Funktionsweise gelten dann analog f\u00fcr die Seiten des eigenen Webshops. Aufbau Der Pizzaservice bzw. Onlineshop soll folgende vier Webseiten enthalten (gilt entsprechend auch fu\u0308r einen eigenem Webshop): Bestellung Bestellstatus ( die Aktualisierunglogik wird in Termin 3 implementiert) Pizzaba\u0308cker Fahrer Der Pizzaservice soll mit HTML5 und CSS Level 3 dargestellt werden Als Webserver wird Apache 2 verwendet und als Datenbank MySQL (enthalten im XAMPP Paket .) Die Abnahme erfolgt auf Ihren Laptops mit den ga\u0308ngigen Browsern. Fu\u0308r die PHP-Entwicklung mu\u0308ssen Seiten-Templates ( siehe Termin 2: PHP \u2013 Seitenklassen, Datenbankzugriff, Sessionmanagement und Sicherheit ) verwendet werden, die vorgegeben und u\u0308ber den EWA-Moodlekurs herunterladbar sind. Designskizze Konzeptionelle Darstellung der vier Web-Seiten des Pizzaservice bzw. Onlineshops Anforderungen des Auftraggebers Pizzabestellung Hier kann der Kunde seine Pizzen aus der Speisekarte auswa\u0308hlen und in einen Warenkorb u\u0308bernehmen. Es wird der Preis der Bestellung angezeigt und es muss eine Lieferadresse angegeben werden. Bestellstatus (=Kundenseite) Hier kann ein Kunde sehen, in welchem Zustand seine Pizzen sind ( bestellt , im Ofen , fertig , unterwegs ). Er sieht nur seine Bestellung \u2013 und keine Auftra\u0308ge von anderen Kunden . Pizzab\u00e4cker Hier werden die bestellten Pizzen angezeigt. Der Pizzaba\u0308cker kann den Status fu\u0308r jede Pizza von \" bestellt \" auf \" im Ofen \" bzw. \" fertig \" setzen. U\u0308bernimmt der Fahrer eine Pizza, so verschwindet sie aus der Liste. Fahrer Hier werden Bestellungen mit den einzelnen Pizzen, Preis und Adresse angezeigt. Der Fahrer kann den Status der Lieferungen vera\u0308ndern. Eine Lieferung ist entweder \" fertig \", \" unterwegs \" oder \" geliefert \". Lieferungen tauchen erst beim Fahrer auf, wenn alle zugeho\u0308rigen Pizzen fertig sind. Ausgelieferte Bestellungen verschwinden aus der Liste. Sonstige Anforderungen Es werden nur gu\u0308ltige Bestellungen akzeptiert Die Auswahl einer Pizza soll u\u0308ber einen Mausklick auf ein Pizzasymbol erfolgen Der Warenkorb bietet die allgemein u\u0308blichen Funktionen Die Bestellseite passt ihre Darstellung fu\u0308r schmale Handybildschirme an und verwendet ein responsives Layout . Versuchen Sie das Layout so umzusetzen, wie es in der Designskizze dargestellt ist. Es sollen 4 getrennte Seiten entwickelt werden. Die Seiten Pizzaba\u0308cker , Bestellstatus und Fahrer sollen sich automatisch aktualisieren . Es gibt zu Testzwecken eine weitere Webseite U\u0308bersicht , welche (fu\u0308r einfache Tests) Links zu den 4 Webseiten beinhaltet. Note Hinweis : Alternativ k\u00f6nnen Sie auch eine Navigationsleiste bzw. ein Navigationsmenu in die Web-Applikation integrieren, dann brauchen Sie keine \u00dcbersichtsseite zu implementieren.","title":"Anforderungen"},{"location":"anforderungen/#anforderungen-an-die-web-applikation","text":"Note Hinweis : Die Anforderungen sind aus Sicht des Pizzaservice beschrieben. Wenn Sie einen eigenen Webshop entwickeln, dann m\u00fcssen Sie die Anforderungen entsprechend \u00fcbertragen (bspw. kann anstelle der B\u00e4ckerseite eine Versandabteilungs- oder Kommissionierungsseite etc. erstellt werden). Die Anforderungen hinsichtlich Aufbau und Funktionsweise gelten dann analog f\u00fcr die Seiten des eigenen Webshops.","title":"Anforderungen an die Web-Applikation"},{"location":"anforderungen/#aufbau","text":"Der Pizzaservice bzw. Onlineshop soll folgende vier Webseiten enthalten (gilt entsprechend auch fu\u0308r einen eigenem Webshop): Bestellung Bestellstatus ( die Aktualisierunglogik wird in Termin 3 implementiert) Pizzaba\u0308cker Fahrer Der Pizzaservice soll mit HTML5 und CSS Level 3 dargestellt werden Als Webserver wird Apache 2 verwendet und als Datenbank MySQL (enthalten im XAMPP Paket .) Die Abnahme erfolgt auf Ihren Laptops mit den ga\u0308ngigen Browsern. Fu\u0308r die PHP-Entwicklung mu\u0308ssen Seiten-Templates ( siehe Termin 2: PHP \u2013 Seitenklassen, Datenbankzugriff, Sessionmanagement und Sicherheit ) verwendet werden, die vorgegeben und u\u0308ber den EWA-Moodlekurs herunterladbar sind.","title":"Aufbau"},{"location":"anforderungen/#designskizze","text":"Konzeptionelle Darstellung der vier Web-Seiten des Pizzaservice bzw. Onlineshops","title":"Designskizze"},{"location":"anforderungen/#anforderungen-des-auftraggebers","text":"Pizzabestellung Hier kann der Kunde seine Pizzen aus der Speisekarte auswa\u0308hlen und in einen Warenkorb u\u0308bernehmen. Es wird der Preis der Bestellung angezeigt und es muss eine Lieferadresse angegeben werden. Bestellstatus (=Kundenseite) Hier kann ein Kunde sehen, in welchem Zustand seine Pizzen sind ( bestellt , im Ofen , fertig , unterwegs ). Er sieht nur seine Bestellung \u2013 und keine Auftra\u0308ge von anderen Kunden . Pizzab\u00e4cker Hier werden die bestellten Pizzen angezeigt. Der Pizzaba\u0308cker kann den Status fu\u0308r jede Pizza von \" bestellt \" auf \" im Ofen \" bzw. \" fertig \" setzen. U\u0308bernimmt der Fahrer eine Pizza, so verschwindet sie aus der Liste. Fahrer Hier werden Bestellungen mit den einzelnen Pizzen, Preis und Adresse angezeigt. Der Fahrer kann den Status der Lieferungen vera\u0308ndern. Eine Lieferung ist entweder \" fertig \", \" unterwegs \" oder \" geliefert \". Lieferungen tauchen erst beim Fahrer auf, wenn alle zugeho\u0308rigen Pizzen fertig sind. Ausgelieferte Bestellungen verschwinden aus der Liste.","title":"Anforderungen des Auftraggebers"},{"location":"anforderungen/#sonstige-anforderungen","text":"Es werden nur gu\u0308ltige Bestellungen akzeptiert Die Auswahl einer Pizza soll u\u0308ber einen Mausklick auf ein Pizzasymbol erfolgen Der Warenkorb bietet die allgemein u\u0308blichen Funktionen Die Bestellseite passt ihre Darstellung fu\u0308r schmale Handybildschirme an und verwendet ein responsives Layout . Versuchen Sie das Layout so umzusetzen, wie es in der Designskizze dargestellt ist. Es sollen 4 getrennte Seiten entwickelt werden. Die Seiten Pizzaba\u0308cker , Bestellstatus und Fahrer sollen sich automatisch aktualisieren . Es gibt zu Testzwecken eine weitere Webseite U\u0308bersicht , welche (fu\u0308r einfache Tests) Links zu den 4 Webseiten beinhaltet. Note Hinweis : Alternativ k\u00f6nnen Sie auch eine Navigationsleiste bzw. ein Navigationsmenu in die Web-Applikation integrieren, dann brauchen Sie keine \u00dcbersichtsseite zu implementieren.","title":"Sonstige Anforderungen"},{"location":"termin0/","text":"Kennen lernen von HTML und Anforderungsanalyse ( zu Hause) Abstract Lernziele Sie ko\u0308nnen einfache HTML Seiten mit einem beliebigen Texteditor oder IDE erstellen Sie verstehen die Grundstruktur einer HTML Seite Sie kennen die wichtigsten Elemente und die Funktionsweise von Formularen Sie verstehen s\u00e4mtliche Anforderungen an das gew\u00e4hlte Shopsystem (Pizzaservice etc.) und haben Ungereimtheiten und Inkonsistenzen mit der/dem Dozenten/in abgekl\u00e4rt Note Hinweis: Diese Einheit ist vor allem f\u00fcr diejenigen Studierenden, die bisher noch keine Erfahrungen mit HTML bzw. der Erstellung von Web-Seiten gesammelt haben. Erfahrene Studierende k\u00f6nnen gleich mit Termin 1 beginnen. Vorbereitung Lesen Sie sich einmal die kompletten Praktikumsaufgaben durch, um einen Eindruck davon zu bekommen, was Sie im Laufe des Semesters erwartet und welche Arbeiten f\u00fcr eine erfolgreiche Testierung notwendig sind. Vergewissern Sie sich, dass Sie alle im Kapitel Vorbemerkungen genannten Informationen verstanden haben Installieren Sie einen HTML-Editor (IDE) Ihrer Wahl Vergewissern Sie sich, dass Ihr Laptop einsatzbereit und funktionst\u00fcchtig ist Aufgaben Anforderungsanalyse Stellen Sie sicher, dass Sie die Aufgabe \"Pizzaservice\" genau verstanden haben und kla\u0308ren Sie offene Punkte fru\u0308hzeitig Analysieren Sie sa\u0308mtliche Vorgaben (sowohl vom Auftraggeber als auch sonstige Vorgaben) Identifizieren Sie Inkonsistenzen und offene Punkte und kla\u0308ren Sie die Fragen mit Ihrem Betreuer / Ihrer Betreuerin Rohform des Shopsystems mit statischem HTML Realisieren Sie alle Seiten (Bestellung, Kunde, B\u00e4cker, Fahrer siehe Anforderungen des Auftraggebers ) mit HTML5 unter Ber\u00fccksichtigung der nachstehenden Hinweise: Erstellen Sie nur die \"Rohform\", d.h., keine physische Formatierung , kein CSS, kein JavaScript etc. Verwenden Sie strukturierende Tags wie section statt div fu\u0308r die globale Seitenstruktur Schreiben Sie Umlaute und das \u20ac-Zeichen direkt in Ihre Dateien (also nicht als \"named character entities / benannte Zeichen\" wie ' ' etc.) Achten Sie auf ordentliche Formatierung des HTML-Quelltextes! Schicken Sie die Formulardaten an das Echo-Skript https://echo.fbi.h-da.de/ oder nutzen Sie einen HTTP-Traffic\u2013Analyzer-Dienst wie https://pipedream.com/ . Analysieren Sie die \u00fcbertragenen Daten hinsichtlich Korrektheit, Vollst\u00e4ndigkeit und Angemessenheit f\u00fcr den aktuellen Anwendungsfall. Verzichten Sie auf den Einsatz von HTML-Tabellen! Realisieren Sie zun\u00e4chst auch diejenigen Seiten statisch, die spa\u0308ter dynamisch aus der Datenbank generiert werden sollen Tragen Sie Beispieldaten ein \u2013 so dass klar ist, was spa\u0308ter generiert werden muss Trennen Sie statische und generierte Daten voneinander Werkzeuge Verwenden Sie einen Editor ihrer Wahl Verwenden Sie als Codierung UTF-8 und schreiben Sie alle Dateien in UTF-8 ohne BOM (wegen PHP) Testen Testen Sie Ihre Seiten mit unterschiedlichen Browsern und validieren Sie die Standardkonformit\u00e4t mittels g\u00e4ngigen Web-basierten HTML5 Validatoren . Nutzen Sie bspw. https://validator.w3.org/#validate_by_input https://html5.validator.nu/ Korrigieren Sie etwaige Fehler und Warnungen. Ergebnisse Die folgenden Ergebnisse m\u00fcssen f\u00fcr eine erfolgreiche Durchf\u00fchrung der Praktikumseinheit vorliegen: Abstract Ergebnisse: Statische und validierte HTML-Seiten f\u00fcr Bestellung, Bestellstatus, B\u00e4cker und Fahrer Funktionierende Formulare mit entsprechend gesetztem Endpoint","title":"Termin 0: HTML"},{"location":"termin0/#kennen-lernen-von-html-und-anforderungsanalyse-zu-hause","text":"Abstract Lernziele Sie ko\u0308nnen einfache HTML Seiten mit einem beliebigen Texteditor oder IDE erstellen Sie verstehen die Grundstruktur einer HTML Seite Sie kennen die wichtigsten Elemente und die Funktionsweise von Formularen Sie verstehen s\u00e4mtliche Anforderungen an das gew\u00e4hlte Shopsystem (Pizzaservice etc.) und haben Ungereimtheiten und Inkonsistenzen mit der/dem Dozenten/in abgekl\u00e4rt Note Hinweis: Diese Einheit ist vor allem f\u00fcr diejenigen Studierenden, die bisher noch keine Erfahrungen mit HTML bzw. der Erstellung von Web-Seiten gesammelt haben. Erfahrene Studierende k\u00f6nnen gleich mit Termin 1 beginnen.","title":"Kennen lernen von HTML und Anforderungsanalyse (--&gt; zu Hause)"},{"location":"termin0/#vorbereitung","text":"Lesen Sie sich einmal die kompletten Praktikumsaufgaben durch, um einen Eindruck davon zu bekommen, was Sie im Laufe des Semesters erwartet und welche Arbeiten f\u00fcr eine erfolgreiche Testierung notwendig sind. Vergewissern Sie sich, dass Sie alle im Kapitel Vorbemerkungen genannten Informationen verstanden haben Installieren Sie einen HTML-Editor (IDE) Ihrer Wahl Vergewissern Sie sich, dass Ihr Laptop einsatzbereit und funktionst\u00fcchtig ist","title":"Vorbereitung"},{"location":"termin0/#aufgaben","text":"","title":"Aufgaben"},{"location":"termin0/#anforderungsanalyse","text":"Stellen Sie sicher, dass Sie die Aufgabe \"Pizzaservice\" genau verstanden haben und kla\u0308ren Sie offene Punkte fru\u0308hzeitig Analysieren Sie sa\u0308mtliche Vorgaben (sowohl vom Auftraggeber als auch sonstige Vorgaben) Identifizieren Sie Inkonsistenzen und offene Punkte und kla\u0308ren Sie die Fragen mit Ihrem Betreuer / Ihrer Betreuerin","title":"Anforderungsanalyse"},{"location":"termin0/#rohform-des-shopsystems-mit-statischem-html","text":"Realisieren Sie alle Seiten (Bestellung, Kunde, B\u00e4cker, Fahrer siehe Anforderungen des Auftraggebers ) mit HTML5 unter Ber\u00fccksichtigung der nachstehenden Hinweise: Erstellen Sie nur die \"Rohform\", d.h., keine physische Formatierung , kein CSS, kein JavaScript etc. Verwenden Sie strukturierende Tags wie section statt div fu\u0308r die globale Seitenstruktur Schreiben Sie Umlaute und das \u20ac-Zeichen direkt in Ihre Dateien (also nicht als \"named character entities / benannte Zeichen\" wie ' ' etc.) Achten Sie auf ordentliche Formatierung des HTML-Quelltextes! Schicken Sie die Formulardaten an das Echo-Skript https://echo.fbi.h-da.de/ oder nutzen Sie einen HTTP-Traffic\u2013Analyzer-Dienst wie https://pipedream.com/ . Analysieren Sie die \u00fcbertragenen Daten hinsichtlich Korrektheit, Vollst\u00e4ndigkeit und Angemessenheit f\u00fcr den aktuellen Anwendungsfall. Verzichten Sie auf den Einsatz von HTML-Tabellen! Realisieren Sie zun\u00e4chst auch diejenigen Seiten statisch, die spa\u0308ter dynamisch aus der Datenbank generiert werden sollen Tragen Sie Beispieldaten ein \u2013 so dass klar ist, was spa\u0308ter generiert werden muss Trennen Sie statische und generierte Daten voneinander","title":"Rohform des Shopsystems mit statischem HTML"},{"location":"termin0/#werkzeuge","text":"Verwenden Sie einen Editor ihrer Wahl Verwenden Sie als Codierung UTF-8 und schreiben Sie alle Dateien in UTF-8 ohne BOM (wegen PHP)","title":"Werkzeuge"},{"location":"termin0/#testen","text":"Testen Sie Ihre Seiten mit unterschiedlichen Browsern und validieren Sie die Standardkonformit\u00e4t mittels g\u00e4ngigen Web-basierten HTML5 Validatoren . Nutzen Sie bspw. https://validator.w3.org/#validate_by_input https://html5.validator.nu/ Korrigieren Sie etwaige Fehler und Warnungen.","title":"Testen"},{"location":"termin0/#ergebnisse","text":"Die folgenden Ergebnisse m\u00fcssen f\u00fcr eine erfolgreiche Durchf\u00fchrung der Praktikumseinheit vorliegen: Abstract Ergebnisse: Statische und validierte HTML-Seiten f\u00fcr Bestellung, Bestellstatus, B\u00e4cker und Fahrer Funktionierende Formulare mit entsprechend gesetztem Endpoint","title":"Ergebnisse"},{"location":"termin1/","text":"PHP: Web-Server Setup und dynamische Seitengenerierung Abstract Lernziele Sie ko\u0308nnen einen Webserver installieren und Ihre Shopseiten dort deployen Sie k\u00f6nnen den HTML-Code Ihres Shopsystems mittels PHP erzeugen Sie verstehen die grundlegende Funktionsweise der dynamischen Seitengenerierung In dieser Einheit geht es darum, sich mit den Grundprinzipien der dynamischen Seitengenerierung mittels PHP und der zugrunde liegenden technischen Infrastruktur (Webserver, Datenbankserver, etc.) auseinander zu setzen. Vorbereitung Lesen Sie sich einmal die kompletten Praktikumsaufgaben durch, um einen Eindruck davon zu bekommen, was Sie im Laufe des Semesters erwartet und welche Arbeiten f\u00fcr eine erfolgreiche Testierung notwendig sind. Vergewissern Sie sich, dass Sie alle im Kapitel Vorbemerkungen genannten Informationen verstanden haben Stellen Sie sicher, dass Sie alle Anforderungen vollst\u00e4ndig verstanden haben. Note Hinweis: Notieren Sie sich die unklaren Anforderungen und besprechen Sie diese in Einheit #1 mit der/dem Dozentin/en. Bestimmen Sie, ob Sie den Standard-Pizzaservice oder ein eigenes Shopsystem implementieren Vergewissern Sie sich, dass Ihr Laptop funktionst\u00fcchtig ist und dass Sie eine passende IDE ausgew\u00e4hlt haben. Aufgaben Installation und Konfiguration von XAMPP Laden Sie sich das XAMPP-Installationspaket f\u00fcr das Betriebssystem Ihres Laptops herunter und installieren Sie dies. Starten Sie den Webserver mittels dem XAMPP-Dienstprogramm Testen Sie, durch Eingabe der Adresse 127.0.0.1 , ob der Webserver l\u00e4uft und ob die Startseite ( Dashboard) angezeigt wird. Lokalisieren Sie den Ordner htdocs innerhalb Ihres XAMPP-Installationsordners und erzeugen Sie dort ein neues Projektverzeichnis (bspw. .../htdocs/pizzaservice/ ) f\u00fcr die Quelldateien des Pizzaservice. Kopieren Sie die in Termin 0: HTML erstellten statischen HTML-Dateien in das neu erstellte Projektverzeichnis (legen Sie hierzu einen neuen Unterordner, bspw. /html/ an) und \u00fcberpr\u00fcfen Sie im Browser, ob Sie die Dateien mittels der entsprechenden URL (bspw. http://127.0.0.1/pizzaservice/html/bestellung.html ) aufrufen k\u00f6nnen. Erzeugung der Seitengrundger\u00fcste mit PHP Erstellen Sie je eine PHP-Seite f\u00fcr Bestellung Kunde ( Bestellstatus) B\u00e4cker Fahrer und versuchen Sie, den f\u00fcr die Darstellung im Browser notwendigen HTML-Code ( siehe Termin 0: HTML und Anforderungsanalyse ) der jeweiligen Seite mit PHP zu erzeugen. Deployen Sie die Seiten im Projektverzeichnis Ihrer XAMPP-Installation und stellen Sie sicher, dass die Seiten korrekt aufgerufen werden. Testen Sie den generierten HTML-Code auf Standardkonformit\u00e4t mittels geeigneter HTML5-Validatoren ( Siehe Aufgabe #3 (Testen) aus Termin 0: HTML). (optional) Anlegen der Datenbankstruktur mittels phpmyadmin Siehe Aufgabe #2 (Datenbankzugriff) aus Termin 2: PHP \u2013 Seitenklassen und Datenbankzugriff mit MySQLi. Ergebnisse Die folgenden Ergebnisse m\u00fcssen f\u00fcr eine erfolgreiche Durchf\u00fchrung der Praktikumseinheit vorliegen: Abstract Ergebnisse: Lauff\u00e4hige Instanz des Apache Webservers Implementierung der Seiten Bestellung.php , Kunde.php , Baecker.php und Fahrer.php Deployment der Seiten Bestellung.php , Kunde.php , Baecker.php und Fahrer.php im htdocs -Order der XAMPP Installation Validierung des generierten HTML5-Codes hinsichtlich Fehlerfreiheit und Standardkonformit\u00e4t (optional) Aufbau und Einrichtung der MySQL-Datenbank","title":"Termin 1: PHP \u2013 Erste Schritte"},{"location":"termin1/#php-web-server-setup-und-dynamische-seitengenerierung","text":"Abstract Lernziele Sie ko\u0308nnen einen Webserver installieren und Ihre Shopseiten dort deployen Sie k\u00f6nnen den HTML-Code Ihres Shopsystems mittels PHP erzeugen Sie verstehen die grundlegende Funktionsweise der dynamischen Seitengenerierung In dieser Einheit geht es darum, sich mit den Grundprinzipien der dynamischen Seitengenerierung mittels PHP und der zugrunde liegenden technischen Infrastruktur (Webserver, Datenbankserver, etc.) auseinander zu setzen.","title":"PHP: Web-Server Setup und dynamische Seitengenerierung"},{"location":"termin1/#vorbereitung","text":"Lesen Sie sich einmal die kompletten Praktikumsaufgaben durch, um einen Eindruck davon zu bekommen, was Sie im Laufe des Semesters erwartet und welche Arbeiten f\u00fcr eine erfolgreiche Testierung notwendig sind. Vergewissern Sie sich, dass Sie alle im Kapitel Vorbemerkungen genannten Informationen verstanden haben Stellen Sie sicher, dass Sie alle Anforderungen vollst\u00e4ndig verstanden haben. Note Hinweis: Notieren Sie sich die unklaren Anforderungen und besprechen Sie diese in Einheit #1 mit der/dem Dozentin/en. Bestimmen Sie, ob Sie den Standard-Pizzaservice oder ein eigenes Shopsystem implementieren Vergewissern Sie sich, dass Ihr Laptop funktionst\u00fcchtig ist und dass Sie eine passende IDE ausgew\u00e4hlt haben.","title":"Vorbereitung"},{"location":"termin1/#aufgaben","text":"","title":"Aufgaben"},{"location":"termin1/#installation-und-konfiguration-von-xampp","text":"Laden Sie sich das XAMPP-Installationspaket f\u00fcr das Betriebssystem Ihres Laptops herunter und installieren Sie dies. Starten Sie den Webserver mittels dem XAMPP-Dienstprogramm Testen Sie, durch Eingabe der Adresse 127.0.0.1 , ob der Webserver l\u00e4uft und ob die Startseite ( Dashboard) angezeigt wird. Lokalisieren Sie den Ordner htdocs innerhalb Ihres XAMPP-Installationsordners und erzeugen Sie dort ein neues Projektverzeichnis (bspw. .../htdocs/pizzaservice/ ) f\u00fcr die Quelldateien des Pizzaservice. Kopieren Sie die in Termin 0: HTML erstellten statischen HTML-Dateien in das neu erstellte Projektverzeichnis (legen Sie hierzu einen neuen Unterordner, bspw. /html/ an) und \u00fcberpr\u00fcfen Sie im Browser, ob Sie die Dateien mittels der entsprechenden URL (bspw. http://127.0.0.1/pizzaservice/html/bestellung.html ) aufrufen k\u00f6nnen.","title":"Installation und Konfiguration von XAMPP"},{"location":"termin1/#erzeugung-der-seitengrundgeruste-mit-php","text":"Erstellen Sie je eine PHP-Seite f\u00fcr Bestellung Kunde ( Bestellstatus) B\u00e4cker Fahrer und versuchen Sie, den f\u00fcr die Darstellung im Browser notwendigen HTML-Code ( siehe Termin 0: HTML und Anforderungsanalyse ) der jeweiligen Seite mit PHP zu erzeugen. Deployen Sie die Seiten im Projektverzeichnis Ihrer XAMPP-Installation und stellen Sie sicher, dass die Seiten korrekt aufgerufen werden. Testen Sie den generierten HTML-Code auf Standardkonformit\u00e4t mittels geeigneter HTML5-Validatoren ( Siehe Aufgabe #3 (Testen) aus Termin 0: HTML).","title":"Erzeugung der Seitengrundger\u00fcste mit PHP"},{"location":"termin1/#optional-anlegen-der-datenbankstruktur-mittels-phpmyadmin","text":"Siehe Aufgabe #2 (Datenbankzugriff) aus Termin 2: PHP \u2013 Seitenklassen und Datenbankzugriff mit MySQLi.","title":"(optional) Anlegen der Datenbankstruktur mittels phpmyadmin"},{"location":"termin1/#ergebnisse","text":"Die folgenden Ergebnisse m\u00fcssen f\u00fcr eine erfolgreiche Durchf\u00fchrung der Praktikumseinheit vorliegen: Abstract Ergebnisse: Lauff\u00e4hige Instanz des Apache Webservers Implementierung der Seiten Bestellung.php , Kunde.php , Baecker.php und Fahrer.php Deployment der Seiten Bestellung.php , Kunde.php , Baecker.php und Fahrer.php im htdocs -Order der XAMPP Installation Validierung des generierten HTML5-Codes hinsichtlich Fehlerfreiheit und Standardkonformit\u00e4t (optional) Aufbau und Einrichtung der MySQL-Datenbank","title":"Ergebnisse"},{"location":"termin2/","text":"PHP: Seitenklassen, Datenbankzugriff, Sessionmanagement und Sicherheit Abstract Lernziele Sie k\u00f6nnen mit PHP und MySQLi einen Datenbankzugriff realisieren Sie k\u00f6nnen die Objekt-orientierte Programmierung mit PHP umsetzen Sie verstehen die grundlegende Funktionsweise der Seiten- und Blockklassenarchitektur Sie k\u00f6nnen ein einfaches Sessionmanagement mit PHP implementieren Sie k\u00f6nnen eine Web-Applikation gegen SQL-Injection und Cross-Site-Scripting (XSS) absichern Ziel dieser Einheit ist die Entwicklung von sauberem, d.h., gut wartbarem, strukturiertem und objektorientierten PHP-Code. Hierzu setzen wir die Seiten- und Blockklassen ein. Ferner stellen wir in dieser Einheit die Datenbankanbindung zur Web-Applikation her und implementieren eine leichtgewichtige Form des Sessionmanagements . Abschlie\u00dfend sichern wir die Web-Applikation gegen SQL-Injection und Cross-Site-Scripting (XSS) ab. Vorbereitung Der Webserver ist installiert und funktioniert ordnungsgem\u00e4\u00df Die in Termin 1: PHP \u2013 Erste Schritte erstellten PHP-Seiten werden ordnungsgem\u00e4\u00df vom Webserver ausgeliefert, d.h., diese sind unter der URL http://127.0.0.1/... abrufbar Die Standardkonformit\u00e4t des von den PHP-Seiten erzeugten HTML-Codes wurde durch einen HTML5-Validator \u00fcberpr\u00fcft und nachgewiesen Aufgaben Dynamische Seitengenerierung mittels Seitenklassen Laden Sie die Zulieferung fu\u0308r das Praktikum von der EWA-Moodleseite herunter: PageTemplate.php dient als Vorlage fu\u0308r die 4 Seiten Bestellung.php Kunde.php Baecker.php Fahrer.php Page.php ist die gemeinsame Basisklasse dieser 4 Seiten-Klassen und soll die Datenbank o\u0308ffnen und schlie\u00dfen und den HTML-Rahmen erzeugen BlockTemplate.php dient als Vorlage fu\u0308r einzelne Blo\u0308cke innerhalb der Seiten Pizzaservice_Documentation.pdf entha\u0308lt eine Dokumentation der Klassen mit Klassendiagramm und Sequenzdiagramm Versuchen Sie mit der Dokumentation und dem Quellcode das Zusammenspiel der verschiedenen Klassen zu verstehen. Kla\u0308ren Sie folgende Fragen: Wo erfolgt der eigentliche Aufruf zur Erstellung einer HTML-Seite? Was tun die Methoden getViewData() , generateView() und processReceivedData() ? Wo wird der HTML-Rahmen erzeugt? Wo wird er ausgegeben? Legen Sie 4 Kopien der Klasse PageTemplate.php an und nennen Sie die Dateien Bestellung.php , Kunde.php , Baecker.php und Fahrer.php . A\u0308ndern Sie auch die Klassennamen und Verweise auf die Klasse innerhalb der Dateien. Verteilen Sie Ihren PHP-Code aus der vorherigen Einheit in die zusta\u0308ndigen Methoden der 5 Klassen Page , Bestellung , Kunde , Baecker und Fahrer (die Kommentare in den Dateien helfen dabei). Note Hinweise : HTML-Ausgaben erfolgen nur in generateView() ! Die Struktur wird besser, wenn Sie Speisekarte, Warenkorb-Formular und Statusansicht unter Verwendung von BlockTemplate.php realisieren (das ist aber optional) Die Ausgabe gro\u0308\u00dferer HTML-Abschnitte ist mit der Heredoc-Notation besonders einfach. Achten Sie darauf, dass die Endmarke in der ersten Spalte beginnen muss und ho\u0308chstens noch ein ; folgen darf Die Methoden der gegebenen Klassen du\u0308rfen auch zusa\u0308tzliche Parameter bekommen Schreiben Sie Hilfs-Methoden oder zusa\u0308tzliche Klassen nach Bedarf Pru\u0308fen Sie, ob die neuen PHP-Seiten als Ausgabe die urspru\u0308nglichen statischen HTML-Seiten erzeugen und ob dieser Code immer noch standardkonform ist. Datenbankzugriff mittels MySQLi Entwerfen Sie das Datenmodell fu\u0308r den Pizzaservice. Nutzen Sie bspw. das folgende Schema: 1 2 3 Angebot : PizzaName , Bilddatei , Preis BestelltePizza : PizzaID , fBestellungID , fPizzaName , Status Bestellung : BestellungID , Adresse , Bestellzeitpunkt Implementieren Sie das Datenmodell mit phpMyAdmin verwenden Sie die Kollation utf8_unicode_ci (im Vorgabewert utf8_general_ci gilt nicht \u00df=ss) PizzaName , PizzaID , BestellungID sind Prima\u0308rschlu\u0308ssel ; IDs mit Autoincrement Realisieren Sie die Verknu\u0308pfungen zwischen den Prima\u0308rschlu\u0308sseln und den Fremdschlu\u0308sseln fBestellungID , fPizzaName in der Datenbank. Tipp: Mit dem \"Designer\" in phpMyAdmin ko\u0308nnen Sie die Beziehungen grafisch eintragen Fu\u0308llen Sie die Tabelle \" Angebot \" manuell mit phpMyAdmin . Tipp zum Bestellzeitpunkt: MySQL-Funktion CURRENT_TIMESTAMP als Standardwert des Feldes. Implementieren Sie die Datenbankzugriffe (Select, Insert Into, Update) in den zusta\u0308ndigen Methoden der Klassen und ersetzen Sie die statischen Codeteile durch den Datenbankzugriffscode Der Zugriff auf die Datenbank erfolgt objektorientiert u\u0308ber die Klasse MySQLi . Zugriff auf die Datenbank erfolgt nur in getViewData() und processReceivedData() . Testen und Debuggen Sie Ihren Code error_reporting(E_ALL) hilft dabei Note Tipps zur Umsetzung var_dump($variable) fu\u0308r die schnelle Testausgabe zwischendurch number_format($zahl, $nachkommastellen) formatiert $zahl $mysqli- insert_id liefert die Autoincrement-ID nach INSERT INTO Tabellen- und Feldnamen in MySQL ggf. in ` (Gravis / accent grave) einklammern pru\u0308fen Sie mit phpMyAdmin ob die Datenbankeintra\u0308ge korrekt erstellt werden Sessionmanagement und Sicherheit Der Kunde soll auf seiner Statusseite nur diejenigen Pizzen sehen, die er selbst zuletzt bestellt hat. Implementieren Sie dieses Feature mittels Sessionverwaltung : Speichern Sie die letzte AuftragsNr in der Session und filtern Sie damit die Pizzaliste Verhindern Sie SQL-Injection mit Hilfe von real_escape_string . Test: geben Sie / \\ als Lieferadresse ein; diese Zeichen mu\u0308ssen auf der Fahrerseite genau so erscheinen. Verhindern Sie Cross Site Scripting mit Hilfe von htmlspecialchars . Test : geben Sie b xxx /b als Lieferadresse ein; dies muss genau so in der Datenbank und in der Ausgabe auf der Fahrerseite erscheinen Testen und validieren Sie die generierten Seiten. Ergebnisse Die folgenden Ergebnisse m\u00fcssen f\u00fcr eine erfolgreiche Durchf\u00fchrung der Praktikumseinheit vorliegen: Abstract Ergebnisse: Implementierung der Seiten Bestellung.php , Kunde.php , Baecker.php und Fahrer.php mittels Seitenklassen und (optional) Blockklassen. Implementierung der Datenbankzugriffe mittels MySQLi Sessionmanagement auf der Kundenseite Absicherung der Web-Applikation gegen SQL-Injection und Cross-Site-Scripting (XSS)","title":"Termin 2: PHP \u2013 Seitenklassen"},{"location":"termin2/#php-seitenklassen-datenbankzugriff-sessionmanagement-und-sicherheit","text":"Abstract Lernziele Sie k\u00f6nnen mit PHP und MySQLi einen Datenbankzugriff realisieren Sie k\u00f6nnen die Objekt-orientierte Programmierung mit PHP umsetzen Sie verstehen die grundlegende Funktionsweise der Seiten- und Blockklassenarchitektur Sie k\u00f6nnen ein einfaches Sessionmanagement mit PHP implementieren Sie k\u00f6nnen eine Web-Applikation gegen SQL-Injection und Cross-Site-Scripting (XSS) absichern Ziel dieser Einheit ist die Entwicklung von sauberem, d.h., gut wartbarem, strukturiertem und objektorientierten PHP-Code. Hierzu setzen wir die Seiten- und Blockklassen ein. Ferner stellen wir in dieser Einheit die Datenbankanbindung zur Web-Applikation her und implementieren eine leichtgewichtige Form des Sessionmanagements . Abschlie\u00dfend sichern wir die Web-Applikation gegen SQL-Injection und Cross-Site-Scripting (XSS) ab.","title":"PHP: Seitenklassen, Datenbankzugriff, Sessionmanagement und Sicherheit"},{"location":"termin2/#vorbereitung","text":"Der Webserver ist installiert und funktioniert ordnungsgem\u00e4\u00df Die in Termin 1: PHP \u2013 Erste Schritte erstellten PHP-Seiten werden ordnungsgem\u00e4\u00df vom Webserver ausgeliefert, d.h., diese sind unter der URL http://127.0.0.1/... abrufbar Die Standardkonformit\u00e4t des von den PHP-Seiten erzeugten HTML-Codes wurde durch einen HTML5-Validator \u00fcberpr\u00fcft und nachgewiesen","title":"Vorbereitung"},{"location":"termin2/#aufgaben","text":"","title":"Aufgaben"},{"location":"termin2/#dynamische-seitengenerierung-mittels-seitenklassen","text":"Laden Sie die Zulieferung fu\u0308r das Praktikum von der EWA-Moodleseite herunter: PageTemplate.php dient als Vorlage fu\u0308r die 4 Seiten Bestellung.php Kunde.php Baecker.php Fahrer.php Page.php ist die gemeinsame Basisklasse dieser 4 Seiten-Klassen und soll die Datenbank o\u0308ffnen und schlie\u00dfen und den HTML-Rahmen erzeugen BlockTemplate.php dient als Vorlage fu\u0308r einzelne Blo\u0308cke innerhalb der Seiten Pizzaservice_Documentation.pdf entha\u0308lt eine Dokumentation der Klassen mit Klassendiagramm und Sequenzdiagramm Versuchen Sie mit der Dokumentation und dem Quellcode das Zusammenspiel der verschiedenen Klassen zu verstehen. Kla\u0308ren Sie folgende Fragen: Wo erfolgt der eigentliche Aufruf zur Erstellung einer HTML-Seite? Was tun die Methoden getViewData() , generateView() und processReceivedData() ? Wo wird der HTML-Rahmen erzeugt? Wo wird er ausgegeben? Legen Sie 4 Kopien der Klasse PageTemplate.php an und nennen Sie die Dateien Bestellung.php , Kunde.php , Baecker.php und Fahrer.php . A\u0308ndern Sie auch die Klassennamen und Verweise auf die Klasse innerhalb der Dateien. Verteilen Sie Ihren PHP-Code aus der vorherigen Einheit in die zusta\u0308ndigen Methoden der 5 Klassen Page , Bestellung , Kunde , Baecker und Fahrer (die Kommentare in den Dateien helfen dabei). Note Hinweise : HTML-Ausgaben erfolgen nur in generateView() ! Die Struktur wird besser, wenn Sie Speisekarte, Warenkorb-Formular und Statusansicht unter Verwendung von BlockTemplate.php realisieren (das ist aber optional) Die Ausgabe gro\u0308\u00dferer HTML-Abschnitte ist mit der Heredoc-Notation besonders einfach. Achten Sie darauf, dass die Endmarke in der ersten Spalte beginnen muss und ho\u0308chstens noch ein ; folgen darf Die Methoden der gegebenen Klassen du\u0308rfen auch zusa\u0308tzliche Parameter bekommen Schreiben Sie Hilfs-Methoden oder zusa\u0308tzliche Klassen nach Bedarf Pru\u0308fen Sie, ob die neuen PHP-Seiten als Ausgabe die urspru\u0308nglichen statischen HTML-Seiten erzeugen und ob dieser Code immer noch standardkonform ist.","title":"Dynamische Seitengenerierung mittels Seitenklassen"},{"location":"termin2/#datenbankzugriff-mittels-mysqli","text":"Entwerfen Sie das Datenmodell fu\u0308r den Pizzaservice. Nutzen Sie bspw. das folgende Schema: 1 2 3 Angebot : PizzaName , Bilddatei , Preis BestelltePizza : PizzaID , fBestellungID , fPizzaName , Status Bestellung : BestellungID , Adresse , Bestellzeitpunkt Implementieren Sie das Datenmodell mit phpMyAdmin verwenden Sie die Kollation utf8_unicode_ci (im Vorgabewert utf8_general_ci gilt nicht \u00df=ss) PizzaName , PizzaID , BestellungID sind Prima\u0308rschlu\u0308ssel ; IDs mit Autoincrement Realisieren Sie die Verknu\u0308pfungen zwischen den Prima\u0308rschlu\u0308sseln und den Fremdschlu\u0308sseln fBestellungID , fPizzaName in der Datenbank. Tipp: Mit dem \"Designer\" in phpMyAdmin ko\u0308nnen Sie die Beziehungen grafisch eintragen Fu\u0308llen Sie die Tabelle \" Angebot \" manuell mit phpMyAdmin . Tipp zum Bestellzeitpunkt: MySQL-Funktion CURRENT_TIMESTAMP als Standardwert des Feldes. Implementieren Sie die Datenbankzugriffe (Select, Insert Into, Update) in den zusta\u0308ndigen Methoden der Klassen und ersetzen Sie die statischen Codeteile durch den Datenbankzugriffscode Der Zugriff auf die Datenbank erfolgt objektorientiert u\u0308ber die Klasse MySQLi . Zugriff auf die Datenbank erfolgt nur in getViewData() und processReceivedData() . Testen und Debuggen Sie Ihren Code error_reporting(E_ALL) hilft dabei Note Tipps zur Umsetzung var_dump($variable) fu\u0308r die schnelle Testausgabe zwischendurch number_format($zahl, $nachkommastellen) formatiert $zahl $mysqli- insert_id liefert die Autoincrement-ID nach INSERT INTO Tabellen- und Feldnamen in MySQL ggf. in ` (Gravis / accent grave) einklammern pru\u0308fen Sie mit phpMyAdmin ob die Datenbankeintra\u0308ge korrekt erstellt werden","title":"Datenbankzugriff mittels MySQLi"},{"location":"termin2/#sessionmanagement-und-sicherheit","text":"Der Kunde soll auf seiner Statusseite nur diejenigen Pizzen sehen, die er selbst zuletzt bestellt hat. Implementieren Sie dieses Feature mittels Sessionverwaltung : Speichern Sie die letzte AuftragsNr in der Session und filtern Sie damit die Pizzaliste Verhindern Sie SQL-Injection mit Hilfe von real_escape_string . Test: geben Sie / \\ als Lieferadresse ein; diese Zeichen mu\u0308ssen auf der Fahrerseite genau so erscheinen. Verhindern Sie Cross Site Scripting mit Hilfe von htmlspecialchars . Test : geben Sie b xxx /b als Lieferadresse ein; dies muss genau so in der Datenbank und in der Ausgabe auf der Fahrerseite erscheinen Testen und validieren Sie die generierten Seiten.","title":"Sessionmanagement und Sicherheit"},{"location":"termin2/#ergebnisse","text":"Die folgenden Ergebnisse m\u00fcssen f\u00fcr eine erfolgreiche Durchf\u00fchrung der Praktikumseinheit vorliegen: Abstract Ergebnisse: Implementierung der Seiten Bestellung.php , Kunde.php , Baecker.php und Fahrer.php mittels Seitenklassen und (optional) Blockklassen. Implementierung der Datenbankzugriffe mittels MySQLi Sessionmanagement auf der Kundenseite Absicherung der Web-Applikation gegen SQL-Injection und Cross-Site-Scripting (XSS)","title":"Ergebnisse"},{"location":"termin3/","text":"Client-seitige Interaktion mit JavaScript, AJAX und JSON Abstract Lernziele Sie k\u00f6nnen mittels JavaScript das DOM einer Seite manipulieren Sie k\u00f6nnen Anwendungsszenarien (bspw. das F\u00fcllen eines Warenkorbs) in entspr. DOM-Manipulationslogik \u00fcbersetzen Sie k\u00f6nnen AJAX-Aufrufe erzeugen und HTTP Responses mittels Handler verarbeiten Sie k\u00f6nnen mittels PHP JSON-Daten erzeugen Sie k\u00f6nnen JSON-Daten clientseitig verarbeiten In dieser Einheit geht es um die Implementierung der Logik zur Client-seitigen Interaktion zwischen BenutzerIn und dem DOM (=Document Object Model) \u2013 bspw. zum Bef\u00fcllen des Warenkorbs. Hierf\u00fcr setzen wir JavaScript ein. Ferner steht in dieser Einheit auch die asynchrone Kommunikation zwischen Server und Client mittels AJAX und JSON im Vordergrund, so dass Status\u00e4nderungen auf der Kundenseite ohne Neuladen der Seite in \"Quasi-Echtzeit\" sichtbar werden. Warning Wichtig : Bis zum Beginn von Termin #3 sollten Sie alle Aufgaben aus Termin #1 und #2 vollst\u00e4ndig bearbeitet haben! Vorbereitung Vergewissern Sie sich, dass die Datenbank korrekt angelegt ist und eine Bestellung fehlerfrei durchgef\u00fchrt wird Testen Sie, dass auf der Kundenseite nur die letzte Bestellung angezeigt wird, nicht aber Bestellungen anderer Kunden Sofern noch nicht vorhanden, generieren Sie einige Bestelldaten f\u00fcr den im Rahmen dieser Einheit zu entwickelnden JSON StatusController Aufgaben Implementierung von Bestellfunktionalit\u00e4t mittels JavaScript Einsatzbereiche fu\u0308r ECMAScript im Pizzaservice/Webshop: Klick auf ein Pizzabild tra\u0308gt diese Pizza in den Warenkorb (Liste) ein; bspw. 3 Pizzen bestellen 3-mal klicken Mo\u0308glichkeit zum Lo\u0308schen der Eintra\u0308ge im Warenkorb sowohl \"Alle lo\u0308schen\" als auch \"(Mehrfach-)Auswahl lo\u0308schen\" Bestellung wird nur abgeschickt, wenn eine Lieferadresse angegeben ist Deaktivierung des Bestellknopfes bei unvollsta\u0308ndigen Daten Berechnung des Preises bei Ba\u0308cker und Fahrer: Klick auf Radio-Button in der Statusliste sendet Statusa\u0308nderung Note Hinweise : Verwenden Sie nur DOM-konforme Attribute und Funktionen und keine browserspezifischen Spezialita\u0308ten (Vorsicht mit Vorlagen aus dem Netz !) Verwenden Sie use strict ; in allen Funktionen Testen Sie die Skripte mit unterschiedlichen Browsern und Lint-Tools Note Bei Problemen mit DOM oder ECMAScript : Pru\u0308fen Sie die Browser-Konsole auf Fehlermeldungen (Aufruf mit F12) Nutzen Sie den DOM-Inspector und den Befehl \"Inspect\" im rechten Mausmenu\u0308 um das DOM zu einem Tag anzuschauen Achten Sie auf Gro\u00df-Klein-Schreibung bei DOM-Aufrufen Pru\u0308fen Sie Ihr ECMAScript mit JSLint oder ESLint fu\u0308r ECMAScript 6 Aktualisierung der Statusdaten mittels AJAX und JSON Note Hinweis : Zur Implementierung und dem Testen des JavaScript-/AJAX-Codes von dieser Aufgabe ben\u00f6tigen Sie den JSON StatusController.php ( siehe n\u00e4chste Aufgabe). Alternativ k\u00f6nnen Sie die Bestelldaten auch mit einem REST-API Development Tool wie bspw. Postman erzeugen ( Mocks mock server ) und die AJAX-Aufrufe damit testen. Ziel dieser Aufgabe ist es, dass die Kundenseite ( Kunde.php ) mittels JavaScript und AJAX den Status aller Bestellpositionen in Quasi-Echtzeit aktualisiert, ohne die Seite jeweils neu laden zu m\u00fcssen. D.h., sobald sich der Status einer Bestellposition auf der B\u00e4cker- oder Fahrer-Seite \u00e4ndert, soll sich diese \u00c4nderung auch auf der Kundenseite widerspiegeln. Vorbemerkungen Die Zust\u00e4nde der Bestellpositionen sind durch Radiobuttons darzustellen ( siehe auch Desginskizze ). Die Initialisierung der Radiobuttons, d.h., das Setzen der Markierungen kann im PHP-Code der Seite Kunde.php erfolgen. Nach dem Aufbau der Seite im Browser sollen alle weiteren Status\u00e4nderungen mittels JavaScript und AJAX realisiert werden, so dass sich der Inhalt der Seite in Abh\u00e4ngigkeit der Status\u00e4nderungen auf B\u00e4cker- und Fahrer-Seite dynamisch anpasst. Die Anfrage nach den aktuellen Zust\u00e4nden der Bestellpositionen einer Bestellung erfolgt mittels zyklisch ausgef\u00fchrten AJAX-Aufrufen ( =Polling ). Das Polling kann durch die JavaScript-Anweisung setTimeout( function , timeout_in_milliseconds , param1 , param2 , ... ); ausgef\u00fchrt werden. function repr\u00e4sentiert hierbei eine JavaScript-Funktion, innerhalb welcher der AJAX-Aufruf initialisiert und durchgef\u00fchrt wird. Ber\u00fccksichtigen Sie bei der Kommunikation mit dem StatusController.php , dass dieser \u00fcber ein Sessionmanagement verf\u00fcgt, d.h., die Variable BestellungId steht idR in der Sessionvariable, sofern zuvor eine Bestellung durchgef\u00fchrt wurde. Ber\u00fccksichtigen Sie die folgenden beiden Situationen Die Kundenseite wurde ohne eine zuvor durchgef\u00fchrte Bestellung aufgerufen Der Kunde l\u00f6st noch w\u00e4hrend der Verarbeitung der aktuellen Bestellung eine neue Bestellung aus Geben Sie im Fall a) eine entsprechende Nachricht auf der Seite aus; Initiieren Sie bei b) einen Redirect auf die Seite Kunde.php . Note Tipp : Um festzustellen, ob der Kunde w\u00e4hrend der Bearbeitung der akutellen Bestellung keine neue Bestellung ausgel\u00f6st hat, k\u00f6nnen Sie die BestellungID im DOM der Seite Kunde.php speichern und bei jedem AJAX-Aufruf mit\u00fcbertragen. Serverseitig kann dann gepr\u00fcft werden, ob die \u00fcbertragene ID mit der in der Sessionvariable gespeicherten ID \u00fcbereinstimmt. Wichtig: Das Polling soll erst starten, nachdem die Seite Kunde.php komplett vom Browser geladen und geparst wurde. Schreiben Sie hierzu einen entspr. onload -Handler. Aus Gr\u00fcnden der Einfachheit k\u00f6nnen Sie die BestellungID als HTTP- GET -Parameter \u00fcbertragen. Aufgaben Implementieren Sie die Funktion zur Erzeugung der AJAX-Requests . Lesen Sie ggf. die BestellungID aus dem Seiten-DOM aus und \u00fcbertragen Sie diese als GET-Parameter im AJAX-Request. Schreiben Sie eine Handler-Funktion f\u00fcr das onload -Event, welche zyklisch den AJAX-Request absetzt, sobald die Seite vollst\u00e4ndig geladen und geparst wurde. Implementieren Sie die Logik zur Auswertung der JSON-Statusdaten und der Anpassung des Seiten-DOMs (=Setzen der Markierungen in den Radiobuttons). Implementieren Sie die Logik zur Behandlung der Sonderf\u00e4lle ( siehe Vorbemerkungen ) Keine Bestellung vorhanden Initiierung einer neuen Bestellung trotz laufender Bestellung. Insbesondere bei Fall (b) gibt es mehrere Umsetzungsm\u00f6glichkeiten StatusController.php liefert HTTP-Statuscode 303 See Other Redirect auf Kunde.php , so dass die Seite mit den neuen Bestelldaten neu aufgebaut wird Zweiter kaskadierter AJAX-Request der feststellt, ob eine neue Bestellung initiiert wurde Entscheiden Sie sich f\u00fcr eine Variante und implementieren Sie diese. Testen Sie die implementierte Variante insbesondere mit den beschriebenen Sonderf\u00e4llen. PHP Controller zur Versendung von Statusupdates mittels JSON Schreiben Sie einen PHP StatusController (Name: StatusController.php ), welcher in Abh\u00e4ngigkeit der aktuellen BestellungId eines Kunden die jeweiligen Statusdaten der Bestellpositionen als JSON zur\u00fcck liefert. Bitte beachten Sie folgende Hinweise: \u00dcberlegen Sie sich vorab, welche Daten StatusController.php von der Kundenseite ben\u00f6tigt, um die korrekten und zugeh\u00f6rigen Statusinformationen zur\u00fcck zu liefern. Note Hinweis : Ben\u00f6tigte Daten k\u00f6nnen in data -Attributen im Seiten-DOM gespeichert und mittels JavaScript f\u00fcr den AJAX-Request ausgelesen werden. Implementieren Sie den Controller auf Basis der Seitenklassenarchitektur . Implementieren Sie hierf\u00fcr eine eigene abstrakte Superklasse nach dem Vorbild der Page.php und lagern Sie wiederverwendbaren Code darin aus. Benennen Sie diese Klasse JSONController.php . Implementieren Sie den StatusController.php und passen Sie hierf\u00fcr das PageTemplate.php entsprechend an. Teilen Sie den Code nach Zugeh\u00f6rigkeit bzw. Verantwortlichkeit (cf. SWT-Prinzip \"Separation of Concerns\" ) auf die drei Methoden getViewData() , generateView() , processReceivedData() auf. Nutzen Sie ein einfaches Sessionmanagement analog dem in Termin 2 beschriebenem, um die notwendigen Daten aus der Datenbank abzufragen. Note Hinweis : In der Sessionvariable steht die zugeh\u00f6rige letzte BestellungId ; nutzen Sie diese f\u00fcr die Abfrage und Generierung der Statusdaten. Entwerfen Sie eine geeignete JSON-Datenstruktur f\u00fcr die \u00dcbertragung der Statusdaten einer Bestellung. Den serialisierten JSON-String erzeugen Sie mittels $var = json_encode({Daten_aus_Recordset}); echo $var nicht vergessen, um den serialisieren JSON-String als HTTP-Response zu versenden! Testen Sie die korrekte Funktionsweise des Controllers mittels einem HTTP-Request Generator bzw. einem REST-API Development Tool wie bspw. Postman Ergebnisse Die folgenden Ergebnisse m\u00fcssen f\u00fcr eine erfolgreiche Durchf\u00fchrung der Praktikumseinheit vorliegen: Abstract Ergebnisse: Vollst\u00e4ndige Implementierung des JavaScript-Codes f\u00fcr die Seite Kunde.php Implementierung der abstrakten Superklasse JSONController.php Implementierung des StatusController.php Aktualisierung der Statusdaten mittels AJAX Implementierung der Logik zur Behandlung der Sonderf\u00e4lle Fehlerfreier Bestelldurchlauf ( ausgiebiges Testen)","title":"Termin 3: JavaScript, AJAX, JSON"},{"location":"termin3/#client-seitige-interaktion-mit-javascript-ajax-und-json","text":"Abstract Lernziele Sie k\u00f6nnen mittels JavaScript das DOM einer Seite manipulieren Sie k\u00f6nnen Anwendungsszenarien (bspw. das F\u00fcllen eines Warenkorbs) in entspr. DOM-Manipulationslogik \u00fcbersetzen Sie k\u00f6nnen AJAX-Aufrufe erzeugen und HTTP Responses mittels Handler verarbeiten Sie k\u00f6nnen mittels PHP JSON-Daten erzeugen Sie k\u00f6nnen JSON-Daten clientseitig verarbeiten In dieser Einheit geht es um die Implementierung der Logik zur Client-seitigen Interaktion zwischen BenutzerIn und dem DOM (=Document Object Model) \u2013 bspw. zum Bef\u00fcllen des Warenkorbs. Hierf\u00fcr setzen wir JavaScript ein. Ferner steht in dieser Einheit auch die asynchrone Kommunikation zwischen Server und Client mittels AJAX und JSON im Vordergrund, so dass Status\u00e4nderungen auf der Kundenseite ohne Neuladen der Seite in \"Quasi-Echtzeit\" sichtbar werden. Warning Wichtig : Bis zum Beginn von Termin #3 sollten Sie alle Aufgaben aus Termin #1 und #2 vollst\u00e4ndig bearbeitet haben!","title":"Client-seitige Interaktion mit JavaScript, AJAX und JSON"},{"location":"termin3/#vorbereitung","text":"Vergewissern Sie sich, dass die Datenbank korrekt angelegt ist und eine Bestellung fehlerfrei durchgef\u00fchrt wird Testen Sie, dass auf der Kundenseite nur die letzte Bestellung angezeigt wird, nicht aber Bestellungen anderer Kunden Sofern noch nicht vorhanden, generieren Sie einige Bestelldaten f\u00fcr den im Rahmen dieser Einheit zu entwickelnden JSON StatusController","title":"Vorbereitung"},{"location":"termin3/#aufgaben","text":"","title":"Aufgaben"},{"location":"termin3/#implementierung-von-bestellfunktionalitat-mittels-javascript","text":"Einsatzbereiche fu\u0308r ECMAScript im Pizzaservice/Webshop: Klick auf ein Pizzabild tra\u0308gt diese Pizza in den Warenkorb (Liste) ein; bspw. 3 Pizzen bestellen 3-mal klicken Mo\u0308glichkeit zum Lo\u0308schen der Eintra\u0308ge im Warenkorb sowohl \"Alle lo\u0308schen\" als auch \"(Mehrfach-)Auswahl lo\u0308schen\" Bestellung wird nur abgeschickt, wenn eine Lieferadresse angegeben ist Deaktivierung des Bestellknopfes bei unvollsta\u0308ndigen Daten Berechnung des Preises bei Ba\u0308cker und Fahrer: Klick auf Radio-Button in der Statusliste sendet Statusa\u0308nderung Note Hinweise : Verwenden Sie nur DOM-konforme Attribute und Funktionen und keine browserspezifischen Spezialita\u0308ten (Vorsicht mit Vorlagen aus dem Netz !) Verwenden Sie use strict ; in allen Funktionen Testen Sie die Skripte mit unterschiedlichen Browsern und Lint-Tools Note Bei Problemen mit DOM oder ECMAScript : Pru\u0308fen Sie die Browser-Konsole auf Fehlermeldungen (Aufruf mit F12) Nutzen Sie den DOM-Inspector und den Befehl \"Inspect\" im rechten Mausmenu\u0308 um das DOM zu einem Tag anzuschauen Achten Sie auf Gro\u00df-Klein-Schreibung bei DOM-Aufrufen Pru\u0308fen Sie Ihr ECMAScript mit JSLint oder ESLint fu\u0308r ECMAScript 6","title":"Implementierung von Bestellfunktionalit\u00e4t mittels JavaScript"},{"location":"termin3/#aktualisierung-der-statusdaten-mittels-ajax-und-json","text":"Note Hinweis : Zur Implementierung und dem Testen des JavaScript-/AJAX-Codes von dieser Aufgabe ben\u00f6tigen Sie den JSON StatusController.php ( siehe n\u00e4chste Aufgabe). Alternativ k\u00f6nnen Sie die Bestelldaten auch mit einem REST-API Development Tool wie bspw. Postman erzeugen ( Mocks mock server ) und die AJAX-Aufrufe damit testen. Ziel dieser Aufgabe ist es, dass die Kundenseite ( Kunde.php ) mittels JavaScript und AJAX den Status aller Bestellpositionen in Quasi-Echtzeit aktualisiert, ohne die Seite jeweils neu laden zu m\u00fcssen. D.h., sobald sich der Status einer Bestellposition auf der B\u00e4cker- oder Fahrer-Seite \u00e4ndert, soll sich diese \u00c4nderung auch auf der Kundenseite widerspiegeln.","title":"Aktualisierung der Statusdaten mittels AJAX und JSON"},{"location":"termin3/#vorbemerkungen","text":"Die Zust\u00e4nde der Bestellpositionen sind durch Radiobuttons darzustellen ( siehe auch Desginskizze ). Die Initialisierung der Radiobuttons, d.h., das Setzen der Markierungen kann im PHP-Code der Seite Kunde.php erfolgen. Nach dem Aufbau der Seite im Browser sollen alle weiteren Status\u00e4nderungen mittels JavaScript und AJAX realisiert werden, so dass sich der Inhalt der Seite in Abh\u00e4ngigkeit der Status\u00e4nderungen auf B\u00e4cker- und Fahrer-Seite dynamisch anpasst. Die Anfrage nach den aktuellen Zust\u00e4nden der Bestellpositionen einer Bestellung erfolgt mittels zyklisch ausgef\u00fchrten AJAX-Aufrufen ( =Polling ). Das Polling kann durch die JavaScript-Anweisung setTimeout( function , timeout_in_milliseconds , param1 , param2 , ... ); ausgef\u00fchrt werden. function repr\u00e4sentiert hierbei eine JavaScript-Funktion, innerhalb welcher der AJAX-Aufruf initialisiert und durchgef\u00fchrt wird. Ber\u00fccksichtigen Sie bei der Kommunikation mit dem StatusController.php , dass dieser \u00fcber ein Sessionmanagement verf\u00fcgt, d.h., die Variable BestellungId steht idR in der Sessionvariable, sofern zuvor eine Bestellung durchgef\u00fchrt wurde. Ber\u00fccksichtigen Sie die folgenden beiden Situationen Die Kundenseite wurde ohne eine zuvor durchgef\u00fchrte Bestellung aufgerufen Der Kunde l\u00f6st noch w\u00e4hrend der Verarbeitung der aktuellen Bestellung eine neue Bestellung aus Geben Sie im Fall a) eine entsprechende Nachricht auf der Seite aus; Initiieren Sie bei b) einen Redirect auf die Seite Kunde.php . Note Tipp : Um festzustellen, ob der Kunde w\u00e4hrend der Bearbeitung der akutellen Bestellung keine neue Bestellung ausgel\u00f6st hat, k\u00f6nnen Sie die BestellungID im DOM der Seite Kunde.php speichern und bei jedem AJAX-Aufruf mit\u00fcbertragen. Serverseitig kann dann gepr\u00fcft werden, ob die \u00fcbertragene ID mit der in der Sessionvariable gespeicherten ID \u00fcbereinstimmt. Wichtig: Das Polling soll erst starten, nachdem die Seite Kunde.php komplett vom Browser geladen und geparst wurde. Schreiben Sie hierzu einen entspr. onload -Handler. Aus Gr\u00fcnden der Einfachheit k\u00f6nnen Sie die BestellungID als HTTP- GET -Parameter \u00fcbertragen.","title":"Vorbemerkungen"},{"location":"termin3/#aufgaben_1","text":"Implementieren Sie die Funktion zur Erzeugung der AJAX-Requests . Lesen Sie ggf. die BestellungID aus dem Seiten-DOM aus und \u00fcbertragen Sie diese als GET-Parameter im AJAX-Request. Schreiben Sie eine Handler-Funktion f\u00fcr das onload -Event, welche zyklisch den AJAX-Request absetzt, sobald die Seite vollst\u00e4ndig geladen und geparst wurde. Implementieren Sie die Logik zur Auswertung der JSON-Statusdaten und der Anpassung des Seiten-DOMs (=Setzen der Markierungen in den Radiobuttons). Implementieren Sie die Logik zur Behandlung der Sonderf\u00e4lle ( siehe Vorbemerkungen ) Keine Bestellung vorhanden Initiierung einer neuen Bestellung trotz laufender Bestellung. Insbesondere bei Fall (b) gibt es mehrere Umsetzungsm\u00f6glichkeiten StatusController.php liefert HTTP-Statuscode 303 See Other Redirect auf Kunde.php , so dass die Seite mit den neuen Bestelldaten neu aufgebaut wird Zweiter kaskadierter AJAX-Request der feststellt, ob eine neue Bestellung initiiert wurde Entscheiden Sie sich f\u00fcr eine Variante und implementieren Sie diese. Testen Sie die implementierte Variante insbesondere mit den beschriebenen Sonderf\u00e4llen.","title":"Aufgaben"},{"location":"termin3/#php-controller-zur-versendung-von-statusupdates-mittels-json","text":"Schreiben Sie einen PHP StatusController (Name: StatusController.php ), welcher in Abh\u00e4ngigkeit der aktuellen BestellungId eines Kunden die jeweiligen Statusdaten der Bestellpositionen als JSON zur\u00fcck liefert. Bitte beachten Sie folgende Hinweise: \u00dcberlegen Sie sich vorab, welche Daten StatusController.php von der Kundenseite ben\u00f6tigt, um die korrekten und zugeh\u00f6rigen Statusinformationen zur\u00fcck zu liefern. Note Hinweis : Ben\u00f6tigte Daten k\u00f6nnen in data -Attributen im Seiten-DOM gespeichert und mittels JavaScript f\u00fcr den AJAX-Request ausgelesen werden. Implementieren Sie den Controller auf Basis der Seitenklassenarchitektur . Implementieren Sie hierf\u00fcr eine eigene abstrakte Superklasse nach dem Vorbild der Page.php und lagern Sie wiederverwendbaren Code darin aus. Benennen Sie diese Klasse JSONController.php . Implementieren Sie den StatusController.php und passen Sie hierf\u00fcr das PageTemplate.php entsprechend an. Teilen Sie den Code nach Zugeh\u00f6rigkeit bzw. Verantwortlichkeit (cf. SWT-Prinzip \"Separation of Concerns\" ) auf die drei Methoden getViewData() , generateView() , processReceivedData() auf. Nutzen Sie ein einfaches Sessionmanagement analog dem in Termin 2 beschriebenem, um die notwendigen Daten aus der Datenbank abzufragen. Note Hinweis : In der Sessionvariable steht die zugeh\u00f6rige letzte BestellungId ; nutzen Sie diese f\u00fcr die Abfrage und Generierung der Statusdaten. Entwerfen Sie eine geeignete JSON-Datenstruktur f\u00fcr die \u00dcbertragung der Statusdaten einer Bestellung. Den serialisierten JSON-String erzeugen Sie mittels $var = json_encode({Daten_aus_Recordset}); echo $var nicht vergessen, um den serialisieren JSON-String als HTTP-Response zu versenden! Testen Sie die korrekte Funktionsweise des Controllers mittels einem HTTP-Request Generator bzw. einem REST-API Development Tool wie bspw. Postman","title":"PHP Controller zur Versendung von Statusupdates mittels JSON"},{"location":"termin3/#ergebnisse","text":"Die folgenden Ergebnisse m\u00fcssen f\u00fcr eine erfolgreiche Durchf\u00fchrung der Praktikumseinheit vorliegen: Abstract Ergebnisse: Vollst\u00e4ndige Implementierung des JavaScript-Codes f\u00fcr die Seite Kunde.php Implementierung der abstrakten Superklasse JSONController.php Implementierung des StatusController.php Aktualisierung der Statusdaten mittels AJAX Implementierung der Logik zur Behandlung der Sonderf\u00e4lle Fehlerfreier Bestelldurchlauf ( ausgiebiges Testen)","title":"Ergebnisse"},{"location":"termin4/","text":"Responsives Webdesign mit CSS Media Queries Abstract Lernziele Sie kennen die Basiselemente eines responsiven Webdesigns Sie k\u00f6nnen ein responsives Webdesign mit CSS und Media Queries erstellen Sie k\u00f6nnen ein selbst erstelltes Design Schema in Ihre Webseiten einbinden Sie kennen Syntax und Logik der Formulierung von CSS Selektoren Ziel dieser Einheit ist die Entwicklung eines Design Schemas f\u00fcr Ihre Web-Applikation mittels CSS Level 3 und Media Queries . Hierzu setzen wir vor allem auf die Entwicklung eines responsiven Designs , bei welchem sich die in einer Seite enthalten UI-Elemente in Abh\u00e4ngigkeit des Ausgabeger\u00e4tes und der Viewportgr\u00f6\u00dfe derart anordnen bzw. darstellen, dass eine hohe User Experience (UX) gew\u00e4hrleistet ist. Note Hinweis #1 : Sie k\u00f6nnen f\u00fcr das Design Ihres Shopsystems gerne ein CSS-Framework wie Bootstrap verwenden. Bitte beachten Sie jedoch, dass Sie in der Klausur nicht auf Bootstrap zur\u00fcck greifen d\u00fcrfen und stattdessen die CSS-Stilregeln \"von Hand\" erstellen m\u00fcssen. Note Hinweis #2 : Die Aufgaben von Termin 4 k\u00f6nnen parallel und iterativ-inkrementell zu den anderen Terminen durchf\u00fchren werden. Warning Wichtig : Die Umsetzung der Aufgaben von Termin 4 wird vermutlich nicht die gesamte Praktikumseinheit ausf\u00fcllen. Nutzen Sie deshalb die restliche Zeit insbesondere zur Bearbeitung etwaiger offener Punkte aus den vorherigen Terminen bzw. der Fertigstellung der Applikation. Aufgaben Entwicklung eines Design-Schemas Entwickeln Sie ein gemeinsames Style Sheet fu\u0308r Ihre Web-Applikation und binden Sie es in alle HTML-Seiten ein \u00dcberlegen Sie sich zu diesem Zweck ein Design-Schema mit Farben, Schriftarten, Schriftgro\u0308\u00dfen, Absta\u0308nde, Ra\u0308nder, Ausrichtung, etc. Verwenden Sie keine physische Formatierung in HTML Verwenden Sie kein style -Attribut Setzen Sie die verschiedenen Ma\u00dfeinheiten sinnvoll ein. Das Layout soll hinsichtlich Fenstergro\u0308\u00dfe und Schriftgro\u0308\u00dfe dynamisch sein! Verwenden Sie keine Tabellen! Responsives Layout und Mobile-First-Ansatz Realisieren Sie die Darstellung der Seite Bestellung.php nach dem Mobile-First-Ansatz . Entwickeln bzw. erweitern Sie das gegebene Stylesheet fu\u0308r den Einsatz auf Mobiltelefonen durch die Verwendung von Media Queries Passen Sie die Komposition der Elemente dynamisch der entspr. Viewportgro\u0308\u00dfe und Orientierung an Testen Sie die Darstellung mit den Web Developer Tools und auf einem Mobiltelefon Ergebnisse Die folgenden Ergebnisse m\u00fcssen f\u00fcr eine erfolgreiche Testierung der Praktikumseinheit vorliegen: Abstract Ergebnisse: Erstellung eines Design Schemas mittels CSS3 und Media Queries Demonstration eines responsiven Webdesigns anhand der Bestellseite Fehlerfreies CSS","title":"Termin 4: CSS & Media Queries"},{"location":"termin4/#responsives-webdesign-mit-css-media-queries","text":"Abstract Lernziele Sie kennen die Basiselemente eines responsiven Webdesigns Sie k\u00f6nnen ein responsives Webdesign mit CSS und Media Queries erstellen Sie k\u00f6nnen ein selbst erstelltes Design Schema in Ihre Webseiten einbinden Sie kennen Syntax und Logik der Formulierung von CSS Selektoren Ziel dieser Einheit ist die Entwicklung eines Design Schemas f\u00fcr Ihre Web-Applikation mittels CSS Level 3 und Media Queries . Hierzu setzen wir vor allem auf die Entwicklung eines responsiven Designs , bei welchem sich die in einer Seite enthalten UI-Elemente in Abh\u00e4ngigkeit des Ausgabeger\u00e4tes und der Viewportgr\u00f6\u00dfe derart anordnen bzw. darstellen, dass eine hohe User Experience (UX) gew\u00e4hrleistet ist. Note Hinweis #1 : Sie k\u00f6nnen f\u00fcr das Design Ihres Shopsystems gerne ein CSS-Framework wie Bootstrap verwenden. Bitte beachten Sie jedoch, dass Sie in der Klausur nicht auf Bootstrap zur\u00fcck greifen d\u00fcrfen und stattdessen die CSS-Stilregeln \"von Hand\" erstellen m\u00fcssen. Note Hinweis #2 : Die Aufgaben von Termin 4 k\u00f6nnen parallel und iterativ-inkrementell zu den anderen Terminen durchf\u00fchren werden. Warning Wichtig : Die Umsetzung der Aufgaben von Termin 4 wird vermutlich nicht die gesamte Praktikumseinheit ausf\u00fcllen. Nutzen Sie deshalb die restliche Zeit insbesondere zur Bearbeitung etwaiger offener Punkte aus den vorherigen Terminen bzw. der Fertigstellung der Applikation.","title":"Responsives Webdesign mit CSS &amp; Media Queries"},{"location":"termin4/#aufgaben","text":"","title":"Aufgaben"},{"location":"termin4/#entwicklung-eines-design-schemas","text":"Entwickeln Sie ein gemeinsames Style Sheet fu\u0308r Ihre Web-Applikation und binden Sie es in alle HTML-Seiten ein \u00dcberlegen Sie sich zu diesem Zweck ein Design-Schema mit Farben, Schriftarten, Schriftgro\u0308\u00dfen, Absta\u0308nde, Ra\u0308nder, Ausrichtung, etc. Verwenden Sie keine physische Formatierung in HTML Verwenden Sie kein style -Attribut Setzen Sie die verschiedenen Ma\u00dfeinheiten sinnvoll ein. Das Layout soll hinsichtlich Fenstergro\u0308\u00dfe und Schriftgro\u0308\u00dfe dynamisch sein! Verwenden Sie keine Tabellen!","title":"Entwicklung eines Design-Schemas"},{"location":"termin4/#responsives-layout-und-mobile-first-ansatz","text":"Realisieren Sie die Darstellung der Seite Bestellung.php nach dem Mobile-First-Ansatz . Entwickeln bzw. erweitern Sie das gegebene Stylesheet fu\u0308r den Einsatz auf Mobiltelefonen durch die Verwendung von Media Queries Passen Sie die Komposition der Elemente dynamisch der entspr. Viewportgro\u0308\u00dfe und Orientierung an Testen Sie die Darstellung mit den Web Developer Tools und auf einem Mobiltelefon","title":"Responsives Layout und Mobile-First-Ansatz"},{"location":"termin4/#ergebnisse","text":"Die folgenden Ergebnisse m\u00fcssen f\u00fcr eine erfolgreiche Testierung der Praktikumseinheit vorliegen: Abstract Ergebnisse: Erstellung eines Design Schemas mittels CSS3 und Media Queries Demonstration eines responsiven Webdesigns anhand der Bestellseite Fehlerfreies CSS","title":"Ergebnisse"},{"location":"termin5/","text":"Abnahme und Testierung Warning Wichtig : Die 5. U\u0308bungseinheit dient ausschlie\u00dflich der Abnahme Ihrer Applikation, d.h., es sind keine Implementierungsarbeiten mehr erlaubt! Allgemeines Vorbereitung Stellen Sie vor Beginn(!) der Einheit sicher, dass Ihre Applikation inkl. der Testfa\u0308lle vollsta\u0308ndig und funktionstu\u0308chtig ist Gehen Sie vor Beginn der \u00dcbungseinheit die angeh\u00e4ngte Checkliste durch \u00fcberpr\u00fcfen Sie, dass alle Punkte erf\u00fcllt sind Sehen Sie auch nochmal im Kapitel Anforderungen an die zu entwickelnde Web-Applikation nach, dass Sie keine Anforderung vergessen oder \u00fcbersehen haben! Die Abnahme findet an einem Ihrer Entwicklungsrechner statt Mock-ups werden nicht akzeptiert \u00d6ffnen Sie die Applikation auf zwei unterschiedlichen Browsern und ordnen Sie die Browserfenster nebeneinander an. \u00d6ffnen Sie parallel auch die Datenbank ( phpmyadmin ) und entfernen Sie vorab alle Testdaten. Bei der Abnahme... ...wird die Funktionstu\u0308chtigkeit der Applikation u\u0308berpru\u0308ft ...wird \u00fcberpr\u00fcft, ob der Bestellprozess fehlerfrei durchgef\u00fchrt werden kann und ob Sie alle Anforderungen umgesetzt haben ...sollten Sie Ihren Code verstehen und erkla\u0308ren ko\u0308nnen ...sollten Sie insgesamt gut vorbereitet sein und inhaltliche bzw. technische Fragen sicher beantworten k\u00f6nnen. Checkliste f\u00fcr die Abnahme Fu\u0308r eine erfolgreiche Abnahme mu\u0308ssen alle Punkte erfu\u0308llt sein! Abstract Checkliste Keine Tabellen im Quellcode enthalten Verwendung von PHP-Seiten- oder Blockklassen Gesamter Bestellprozess funktioniert fehlerfrei Alle Seiten werden vom W3C Validator als fehlerfrei erkannt Responsives Layout + Verwendung von Media Queries Automatische Seitenaktualisierung bei Statusa\u0308nderungen Absicherung der Web-Applikation gegen Cross-Site-Scripting (XSS) Absicherung gegen SQL-Injection Daten werden korrekt in die DB geschrieben Benutzer sieht nur die eigene Bestellung (Test mit 2 versch. Browsern) Aktualisierung der Kundenseite mittel AJAX und JSON Einsatz der Seitenklassenarchitektur beim PHP Controller Validierung der Benutzereingaben mittels JavaScript Status\u00e4nderung bei Radiobuttons f\u00fchrt zur Aktualisierung der Datenbank Einzelne Positionen einer Bestellung werden auf der B\u00e4cker-Seite angezeigt Bestellung verschwindet auf Fahrer-Seite nach Auslieferung Bestellung verschwindet von B\u00e4cker-Seite nach Fertigstellung aller Pizzas","title":"Termin 5: Abnahme"},{"location":"termin5/#abnahme-und-testierung","text":"Warning Wichtig : Die 5. U\u0308bungseinheit dient ausschlie\u00dflich der Abnahme Ihrer Applikation, d.h., es sind keine Implementierungsarbeiten mehr erlaubt!","title":"Abnahme und Testierung"},{"location":"termin5/#allgemeines","text":"","title":"Allgemeines"},{"location":"termin5/#vorbereitung","text":"Stellen Sie vor Beginn(!) der Einheit sicher, dass Ihre Applikation inkl. der Testfa\u0308lle vollsta\u0308ndig und funktionstu\u0308chtig ist Gehen Sie vor Beginn der \u00dcbungseinheit die angeh\u00e4ngte Checkliste durch \u00fcberpr\u00fcfen Sie, dass alle Punkte erf\u00fcllt sind Sehen Sie auch nochmal im Kapitel Anforderungen an die zu entwickelnde Web-Applikation nach, dass Sie keine Anforderung vergessen oder \u00fcbersehen haben! Die Abnahme findet an einem Ihrer Entwicklungsrechner statt Mock-ups werden nicht akzeptiert \u00d6ffnen Sie die Applikation auf zwei unterschiedlichen Browsern und ordnen Sie die Browserfenster nebeneinander an. \u00d6ffnen Sie parallel auch die Datenbank ( phpmyadmin ) und entfernen Sie vorab alle Testdaten.","title":"Vorbereitung"},{"location":"termin5/#bei-der-abnahme","text":"...wird die Funktionstu\u0308chtigkeit der Applikation u\u0308berpru\u0308ft ...wird \u00fcberpr\u00fcft, ob der Bestellprozess fehlerfrei durchgef\u00fchrt werden kann und ob Sie alle Anforderungen umgesetzt haben ...sollten Sie Ihren Code verstehen und erkla\u0308ren ko\u0308nnen ...sollten Sie insgesamt gut vorbereitet sein und inhaltliche bzw. technische Fragen sicher beantworten k\u00f6nnen.","title":"Bei der Abnahme..."},{"location":"termin5/#checkliste-fur-die-abnahme","text":"Fu\u0308r eine erfolgreiche Abnahme mu\u0308ssen alle Punkte erfu\u0308llt sein! Abstract Checkliste Keine Tabellen im Quellcode enthalten Verwendung von PHP-Seiten- oder Blockklassen Gesamter Bestellprozess funktioniert fehlerfrei Alle Seiten werden vom W3C Validator als fehlerfrei erkannt Responsives Layout + Verwendung von Media Queries Automatische Seitenaktualisierung bei Statusa\u0308nderungen Absicherung der Web-Applikation gegen Cross-Site-Scripting (XSS) Absicherung gegen SQL-Injection Daten werden korrekt in die DB geschrieben Benutzer sieht nur die eigene Bestellung (Test mit 2 versch. Browsern) Aktualisierung der Kundenseite mittel AJAX und JSON Einsatz der Seitenklassenarchitektur beim PHP Controller Validierung der Benutzereingaben mittels JavaScript Status\u00e4nderung bei Radiobuttons f\u00fchrt zur Aktualisierung der Datenbank Einzelne Positionen einer Bestellung werden auf der B\u00e4cker-Seite angezeigt Bestellung verschwindet auf Fahrer-Seite nach Auslieferung Bestellung verschwindet von B\u00e4cker-Seite nach Fertigstellung aller Pizzas","title":"Checkliste f\u00fcr die Abnahme"},{"location":"vorbemerkung/","text":"Semesterthema Web-basierter Pizzaservice bzw. Onlineshop Vorbemerkungen Im Lauf des Semesters soll eine integrierte webbasierte Anwendung in Form eines Pizzaservice (das ist die Standard-Applikation) oder eines Webshops nach eigener Wahl entwickelt werden. Der Pizzaservice bzw. Webshop soll die folgenden technischen Eigenschaften aufweisen: Clientseitig : Responsive Webseiten mit HTML und CSS Nutzereingaben mittels Formularen Client-seitige Interaktion mit JavaScript Echtzeitaktualisierung von Statusinformationen mittels AJAX und JSON Serverseitig : Apache Webserver Dynamische Seitengenerierung mit PHP Anbindung einer MySQL-Datenbank Nutzung der Seiten- und Blockklassenarchitektur Generierung von JSON-Daten Der Schwerpunkt liegt vor allem auf einer Software-technisch sauberen Umsetzung . Wichtig hierbei ist Standardkonformita\u0308t , Barrierefreiheit , Responsivit\u00e4t , Trennung der Verantwortlichkeiten ( engl. \"Separation of Concerns\" ), Tests und die Einhaltung der bew\u00e4hrten Regeln guter Softwaretechnik . Es geht in EWA nicht um Homepage-Bastelei oder die Verwendung von \"Fertigteilen\"! Warning Nicht die Funktionalita\u0308t steht im Vordergrund, sondern die Integration der verschiedenen Techniken und die Methodik der Vorgehensweise. Warning Die reine Umsetzung der Funktionalita\u0308t des Shopsystems reicht nicht fu\u0308r die Abnahme! Die objektorientierte Umsetzung mit Seitenklassen ist ein Pflichtbestandteil! Beispiele Pizzaservice Eine Studierendenl\u00f6sung aus dem SoSe2018 \u00dcbersichtsseite Bestellseite \u00dcbersichtsseite beim Kunden B\u00e4ckerseite Fahrerseite Servershop Ein Studierendenprojekt aus dem WiSe 2018/2019 Startseite mit Login Katalogansicht Einkaufswagen Warenkorbansicht Statusanzeige beim Kunden Statusanzeige Shop","title":"Vorbemerkungen"},{"location":"vorbemerkung/#semesterthema-web-basierter-pizzaservice-bzw-onlineshop","text":"","title":"Semesterthema Web-basierter Pizzaservice bzw. Onlineshop"},{"location":"vorbemerkung/#vorbemerkungen","text":"Im Lauf des Semesters soll eine integrierte webbasierte Anwendung in Form eines Pizzaservice (das ist die Standard-Applikation) oder eines Webshops nach eigener Wahl entwickelt werden. Der Pizzaservice bzw. Webshop soll die folgenden technischen Eigenschaften aufweisen: Clientseitig : Responsive Webseiten mit HTML und CSS Nutzereingaben mittels Formularen Client-seitige Interaktion mit JavaScript Echtzeitaktualisierung von Statusinformationen mittels AJAX und JSON Serverseitig : Apache Webserver Dynamische Seitengenerierung mit PHP Anbindung einer MySQL-Datenbank Nutzung der Seiten- und Blockklassenarchitektur Generierung von JSON-Daten Der Schwerpunkt liegt vor allem auf einer Software-technisch sauberen Umsetzung . Wichtig hierbei ist Standardkonformita\u0308t , Barrierefreiheit , Responsivit\u00e4t , Trennung der Verantwortlichkeiten ( engl. \"Separation of Concerns\" ), Tests und die Einhaltung der bew\u00e4hrten Regeln guter Softwaretechnik . Es geht in EWA nicht um Homepage-Bastelei oder die Verwendung von \"Fertigteilen\"! Warning Nicht die Funktionalita\u0308t steht im Vordergrund, sondern die Integration der verschiedenen Techniken und die Methodik der Vorgehensweise. Warning Die reine Umsetzung der Funktionalita\u0308t des Shopsystems reicht nicht fu\u0308r die Abnahme! Die objektorientierte Umsetzung mit Seitenklassen ist ein Pflichtbestandteil!","title":"Vorbemerkungen"},{"location":"vorbemerkung/#beispiele","text":"","title":"Beispiele"},{"location":"vorbemerkung/#pizzaservice","text":"Eine Studierendenl\u00f6sung aus dem SoSe2018 \u00dcbersichtsseite Bestellseite \u00dcbersichtsseite beim Kunden B\u00e4ckerseite Fahrerseite","title":"Pizzaservice"},{"location":"vorbemerkung/#servershop","text":"Ein Studierendenprojekt aus dem WiSe 2018/2019 Startseite mit Login Katalogansicht Einkaufswagen Warenkorbansicht Statusanzeige beim Kunden Statusanzeige Shop","title":"Servershop"}]}